/home/jdc/git/rwhaskell/ch1
/usr/local/plan9/font/times/latin1.7a.font
/home/jdc/opt/src/icons/icons.14.font
  0.0000000  59.8437500
w Newcol Kill Putall Dump acme.dump Exit 
c          0 New Cut Paste Snarf Sort Zerox Delcol 
c          1 New Cut Paste Snarf Sort Zerox Delcol 
f          0           1         317         349   2.0652174 
          1          50         362           0           0 /home/jdc/git/pnblic/nb/20100805 Del Snarf | Look 
f          0           2         395         395   4.1304348 
          2          50         395           1           0 /home/jdc/git/rwhaskell/ch1/ Del Snarf Get | Look 
F          1           0         433         447   2.0652174         447 
          7          46         447           0           1 /home/jdc/Dropbox/nb/+Errors Del Snarf | Look 
2192  ->          →	right arrow
uchar ⋁
ucode disjunction
2228	∨	logical or, vee, disjunction
ucode: exit 1
22C1  L|          ⋁	n-ary logical or
uchar ↥
ucode implication

ucode 21a5
2283  sp          ⊃	superset of
uchar: exit 1
2194  ab          ↔	left right arrow
uchar: exit 1
00D7  mu          ×	multiplication sign
uchar: exit 1
21a5	upwards arrow from bar
uchar: exit 1
ucode: exit 1
21A5  _^          ↥	upwards arrow from bar
ucode: exit 1
F          1           1         747         747   4.1304348         747 
          8          49         747           0           1 /home/jdc/git/pnblic/nb/+Errors Del Snarf | Look 
../bin/nb
grep '^nb' 2010070[3-9] /dev/null | sed 's,^[^:]+: ?nb ,,' | fmt -w 1 | sort | uniq -d | fmt -w 140
echo 'Recent http://j.mp/pnblic: bdd blog code disqus github haskell jekyll language liquid list pages rails rspec ruby tdd test unit variable' | wc -c
cd /home/jdc/Dropbox/nb
topics=`{ls -tr |grep -v acme.dump | grep -v guide | grep -v '\.sed' | grep -v nbindex | grep -v twitter | grep -v swtools2 | tail -$n}
Recent http://j.mp/pnblic notes: test gitrdun lego macosx convert clojure compress haskell knowledge polyglot ruby shell swcraft unix τ tdd
flip function haskell irc lambdabot
    141
Recent http://j.mp/pnblic: book clang computer directory file flip function haskell irc lambdabot layout map operator programming ruby video
F          1           2      128416      128416   6.1956522      128416 
          9          62      128416           0           1 /home/jdc/git/rwhaskell/ch1/+Errors Del Snarf Undo Put | Look 
diff --git a/acme.dump b/acme.dump
index d1cf196..4d19bbb 100644
--- a/acme.dump
+++ b/acme.dump
@@ -18,8 +18,8 @@ can't open /home/jdc/git/rwhaskell/ch1/guide: No such file or directory
 /home/jdc/.cabal/lib/simple-reflect-0.2/ghc-6.12.1/Debug/SimpleReflect/Expr.hi: NUL bytes elided
 can't open /home/jdc/git/rwhaskell/ch1/cpprint.ℓhs: No such file or directory
 /home/jdc/git/rwhaskell/ch1/cpprint.ℓhs not written; file already exists
-F          1           1       62363       62363   4.1304348       62363 
-          4          58       62363           0           1 /home/jdc/git/rwhaskell/+Errors Del Snarf Undo Put | Look 
+F          1           1       63121       63121   4.1304348       63121 
+          4          58       63121           0           1 /home/jdc/git/rwhaskell/+Errors Del Snarf Undo Put | Look 
 # On branch master
 # Changes to be committed:
 #   (use "git reset HEAD <file>..." to unstage)
@@ -1734,5 +1734,26 @@ index 9649d0c..23125a7 100644
 #	modified:   guide
 #
 no changes added to commit (use "git add" and/or "git commit -a")
-f          1           5          45          56  83.9130435 
+# On branch master
+# Changed but not updated:
+#   (use "git add <file>..." to update what will be committed)
+#   (use "git checkout -- <file>..." to discard changes in working directory)
+#
+#	modified:   .gitignore
+#	modified:   acme.dump
+#	modified:   ch1/acme.dump
+#	modified:   "ch1/calc.\342\204\223hs"
+#	modified:   "ch1/calc_test.\342\204\223hs"
+#	modified:   ch1/guide
+#	modified:   ch1/toascii.sed
+#	modified:   "ch1/uniop.\342\204\223hs"
+#	modified:   guide
+#
+no changes added to commit (use "git add" and/or "git commit -a")
+[master a7428ed] Add − ↑ ÷ × and · to uniop.ℓhs.
+ 9 files changed, 3119 insertions(+), 121 deletions(-)
+ rewrite "ch1/calc.\342\204\223hs" (67%)
+To git@github.com:catenate/rwhaskell.git
+   d072f27..a7428ed  master -> master
+f          1           5          65         139  83.9130435 
           5          52         226           0           0 /home/jdc/git/rwhaskell/guide Del Snarf Undo | Look 
diff --git "a/ch1/UnicodeOperators.\342\204\223hs" "b/ch1/UnicodeOperators.\342\204\223hs"
index 38ac63c..803c12d 100644
--- "a/ch1/UnicodeOperators.\342\204\223hs"
+++ "b/ch1/UnicodeOperators.\342\204\223hs"
@@ -46,11 +46,13 @@ forall	∀	0x2200	FOR ALL
 <-	←	0x2190	LEFTWARDS ARROW
 ..	…	0x22EF	MIDLINE HORIZONTAL ELLIPSIS
 
+> {-# OPTIONS_GHC -XUnicodeSyntax #-}
+
 
 nb haskell define use new operator @rwhbook
 RWH pp. 225–226
 
-> module UniOp where
+> module UnicodeOperators where
 
 =? includes both equality (=) and test (?).
 
@@ -96,6 +98,24 @@ known as the “division sign” and has the code point U+00F7.¹
 > (÷) = (/)
 > infixl 7 ÷
 
+To represent exponentiation with only integer exponents, we use ↥,
+up-arrow with lower horizontal bar, in style of floor-function notation.
+Real exponentiation ↑ has no lower horizontal bar.
+
+Gauss introduced the square bracket notation [x] for the floor function
+in his third proof of quadratic reciprocity (1808).  This remained the
+standard in mathematics until Iverson introduced the names "floor" and
+"ceiling" and the corresponding notations ⌊x⌋ and ⌈x⌉ in his 1962 book
+/A Programming Language/.  Both notations are now used in mathematics;
+this article follows Iverson.  ….  The floor and ceiling function are
+usually typeset with left and right square brackets where the upper (for
+floor function) or lower (for ceiling function) horizontal bars are missing….¹
+ ¹ http://en.wikipedia.org/wiki/Floor_function
+
+> (↑) :: (Floating a) ⇒ a → a → a
+> (↑) = (**)
+> infixr 8 ↑
+
 In expressions such as a^{b}, the notation for exponentiation is usually
 to write the exponent b as a superscript to the base number a.  But many
 environments—such as programming languages and plain-text e-mail—do not
@@ -107,9 +127,35 @@ itself well to generalization, which explains why Knuth chose to work
 from the inline notation a↑b instead.¹
  ¹ http://en.wikipedia.org/wiki/Knuth's_up-arrow_notation
 
-> (↑) :: (Num a, Integral b) => a -> b -> a
-> (↑) = (^)
-> infixr 8 ↑
+> (↥) :: (Num a, Integral b) => a -> b -> a
+> (↥) = (^)
+> infixr 8 ↥
+
+To extend the sequence of operations beyond exponentiation, Knuth
+defined a “double arrow” operator to denote iterated exponentiation
+(tetration).  ….  Here and below evaluation is to take place from right
+to left, as Knuth's arrow operators (just like exponentiation) are
+defined to be right-associative.¹
+ ¹ http://en.wikipedia.org/wiki/Knuth's_up-arrow_notation
+
+> (↥↥) :: (Integral a, Integral b) => a -> b -> a
+> x ↥↥ y | y > 0 = x ↥ x ↥↥ (y − 1)
+> x ↥↥ y | y ≤ 0 = 1
+> infixr 8 ↥↥
+
+This already leads to some fairly large numbers, but Knuth extended the
+notation.  He went on to define a “triple arrow” operator a↑↑↑b for
+iterated application of the “double arrow” operator (also known as
+pentation), followed by a 'quad arrow' operator a↑↑↑↑b, and so on.
+The general rule is that an n-arrow operator expands into a right-
+associative series of (n−1)-arrow operators.  ….  The notation "a ↑n b"
+is commonly used to denote a↑↑…↑b with n arrows.¹
+ ¹ http://en.wikipedia.org/wiki/Knuth's_up-arrow_notation
+
+> (↥↥↥) :: (Integral a, Integral b) => a -> b -> a
+> x ↥↥↥ y | y > 0 = x ↥↥ x ↥↥↥ (y − 1)
+> x ↥↥↥ y | y ≤ 0 = 1
+> infixr 8 ↥↥↥
 
 The Unicode minus sign is designed to be the same length and height as
 the plus and equals signs.  In most fonts these are the same width as
diff --git a/ch1/acme.dump b/ch1/acme.dump
index 0f2c95b..2b1e6f6 100644
--- a/ch1/acme.dump
+++ b/ch1/acme.dump
@@ -5,27 +5,27 @@
 w Newcol Kill Putall Dump acme.dump Exit 
 c          0 New Cut Paste Snarf Sort Zerox Delcol 
 c          1 New Cut Paste Snarf Sort Zerox Delcol 
-f          0          10         317         349   2.0652174 
-         10          60         362           0           0 /home/jdc/git/pnblic/nb/20100805 Del Snarf Undo Redo | Look 
-f          0           2         319         330   4.1304348 
-          2          50         382           1           1 /home/jdc/git/rwhaskell/ch1/ Del Snarf Get | Look 
-f          0           3        1017        1017   6.1956522 
-          3          94        2154           0           0 /home/jdc/git/rwhaskell/ch1/calc.ℓhs Del Snarf Undo | Look 
-f          0          15         185         185   8.2608696 
-         15          62         283           0           0 /home/jdc/git/rwhaskell/ch1/toascii.sed Del Snarf Undo | Look 
-f          0           5        2925        2925  10.3260870 
-          5          71        6536           0           0 /home/jdc/git/rwhaskell/ch1/uniop.ℓhs Del Snarf Undo | Look 
-f          0          19         914         958  98.1521739 
-         19          54        2162           0           0 /home/jdc/git/rwhaskell/ch1/calc.lhs Del Snarf | Look 
-F          1           0         323         337   2.0652174         337 
-          6          55         337           0           0 /home/jdc/Dropbox/nb/+Errors Del Snarf Undo Put | Look 
+f          0           1         317         349   2.0652174 
+          1          50         362           0           0 /home/jdc/git/pnblic/nb/20100805 Del Snarf | Look 
+f          0           2          98          98   4.1304348 
+          2          50         373           1           0 /home/jdc/git/rwhaskell/ch1/ Del Snarf Get | Look 
+f          0           3        2084        2092   6.1956522 
+          3          54        2501           0           0 /home/jdc/git/rwhaskell/ch1/calc.ℓhs Del Snarf | Look 
+f          0           4          40          40   8.2608696 
+          4          57         283           0           0 /home/jdc/git/rwhaskell/ch1/toascii.sed Del Snarf | Look 
+f          0           5        3880        3880  10.3260870 
+          5          71        8542           0           0 /home/jdc/git/rwhaskell/ch1/uniop.ℓhs Del Snarf Undo | Look 
+f          0           6         193         193  98.1521739 
+          6          58         330           0           0 /home/jdc/git/rwhaskell/ch1/constant.ℓhs Del Snarf | Look 
+F          1           0         337         341   2.0652174         379 
+          7          55         379           0           0 /home/jdc/Dropbox/nb/+Errors Del Snarf Undo Put | Look 
 2192  ->          →	right arrow
 uchar ⋁
 ucode disjunction
 2228	∨	logical or, vee, disjunction
 ucode: exit 1
 22C1  L|          ⋁	n-ary logical or
-uchar ×
+uchar ↥
 ucode implication
 
 ucode: exit 1
@@ -35,8 +35,10 @@ uchar: exit 1
 uchar: exit 1
 00D7  mu          ×	multiplication sign
 uchar: exit 1
-F          1           1         747         747   4.1304348         747 
-          7          49         747           0           1 /home/jdc/git/pnblic/nb/+Errors Del Snarf | Look 
+21a5	upwards arrow from bar
+uchar: exit 1
+F          1           1         747         747  94.0217391         747 
+          8          49         747           0           1 /home/jdc/git/pnblic/nb/+Errors Del Snarf | Look 
 ../bin/nb
 grep '^nb' 2010070[3-9] /dev/null | sed 's,^[^:]+: ?nb ,,' | fmt -w 1 | sort | uniq -d | fmt -w 140
 echo 'Recent http://j.mp/pnblic: bdd blog code disqus github haskell jekyll language liquid list pages rails rspec ruby tdd test unit variable' | wc -c
@@ -46,8 +48,8 @@ Recent http://j.mp/pnblic notes: test gitrdun lego macosx convert clojure compre
 flip function haskell irc lambdabot
     141
 Recent http://j.mp/pnblic: book clang computer directory file flip function haskell irc lambdabot layout map operator programming ruby video
-F          1           2      144579      144579   6.1956522      144579 
-          8          62      144579           0           1 /home/jdc/git/rwhaskell/ch1/+Errors Del Snarf Undo Put | Look 
+F          1           2      166801      166801  96.0869565      166801 
+          9          62      166801           0           1 /home/jdc/git/rwhaskell/ch1/+Errors Del Snarf Undo Put | Look 
 ghc -fhpc -o calc calc_main.lhs calc.lhs --make -fforce-recomp -XRankNTypes
 [1 of 2] Compiling Add1             ( calc.lhs, calc.o )
 [2 of 2] Compiling Main             ( calc_main.lhs, calc_main.o )
@@ -4197,5 +4199,621 @@ calc.ℓhs:76: τ → 6.283185307179586
 calc.ℓhs:77: ℯ → 2.718281828459045
 calc.ℓhs:78: -3 → -3
 calc.ℓhs:81: 0 → 0
-f          1           9         365         400  69.3478261 
-          9          56         691           0           0 /home/jdc/git/rwhaskell/ch1/guide Del Snarf Undo | Look 
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_test.lhs, calc_test.o )
+Linking calc ...
+ghc -fhpc -o calc calc_test.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+rm -f calc.tix
+./calc
+calc.ℓhs:33: 2 + 2 → 4
+calc.ℓhs:34: (+) 2 2 → 4
+calc.ℓhs:35: 31337 × 101 → 3165037
+calc.ℓhs:36: 7.0 / 2.0 → 3.5
+calc.ℓhs:37: 313 ↑ 15 → 27112218957718876716220410905036741257
+calc.ℓhs:38: 2 + (-3) → -1
+calc.ℓhs:39: 3 + (-(13 × 37)) → -478
+calc.ℓhs:40: 2×3 → 6
+calc.ℓhs:41: 2×(-3) → -6
+calc.ℓhs:44: 6 + 3 → 9
+calc.ℓhs:45: 6 - 3 → 3
+calc.ℓhs:46: 6 − 3 → 3
+calc.ℓhs:47: 6 * 3 → 18
+calc.ℓhs:48: 6 · 3 → 18
+calc.ℓhs:49: 6 × 3 → 18
+calc.ℓhs:50: 6 / 3 → 2.0
+calc.ℓhs:51: 6 ÷ 3 → 2.0
+calc.ℓhs:52: 6 ^ 3 → 216
+calc.ℓhs:53: 6 ↑ 3 → 216
+calc.ℓhs:56: True ⋀ False → False
+calc.ℓhs:57: False ⋁ True → True
+calc.ℓhs:59: 1 =? 1 → True
+calc.ℓhs:60: 2 < 3 → True
+calc.ℓhs:61: 2 ≤ 3 → True
+calc.ℓhs:62: 4 ≥ 3.99 → True
+calc.ℓhs:63: 2 ≠ 3 → True
+calc.ℓhs:64: not True → False
+calc.ℓhs:67: exp $ (0 :+ 1) · τc → 1.0 :+ 0.0
+calc.ℓhs:74: i → 0.0 :+ 1.0
+calc.ℓhs:75: π → 3.141592653589793
+calc.ℓhs:76: τ → 6.283185307179586
+calc.ℓhs:77: ℯ → 2.718281828459045
+calc.ℓhs:78: -3 → -3
+calc.ℓhs:81: 0 → 0
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_test.lhs, calc_test.o )
+Linking calc ...
+sed -f toascii.sed uniop.ℓhs > uniop.ℓhs
+ghc -fhpc -o calc calc_test.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+rm -f calc.tix
+./calc
+calc.ℓhs:33: 2 + 2 → 4
+calc.ℓhs:34: (+) 2 2 → 4
+calc.ℓhs:35: 31337 × 101 → 3165037
+calc.ℓhs:36: 7.0 / 2.0 → 3.5
+calc.ℓhs:37: 313 ↑ 15 → 27112218957718876716220410905036741257
+calc.ℓhs:38: 2 + (-3) → -1
+calc.ℓhs:39: 3 + (-(13 × 37)) → -478
+calc.ℓhs:40: 2×3 → 6
+calc.ℓhs:41: 2×(-3) → -6
+calc.ℓhs:44: 6 + 3 → 9
+calc.ℓhs:45: 6 - 3 → 3
+calc.ℓhs:46: 6 − 3 → 3
+calc.ℓhs:47: 6 * 3 → 18
+calc.ℓhs:48: 6 · 3 → 18
+calc.ℓhs:49: 6 × 3 → 18
+calc.ℓhs:50: 6 / 3 → 2.0
+calc.ℓhs:51: 6 ÷ 3 → 2.0
+calc.ℓhs:52: 6 ^ 3 → 216
+calc.ℓhs:53: 6 ↑ 3 → 216
+calc.ℓhs:56: True ⋀ False → False
+calc.ℓhs:57: False ⋁ True → True
+calc.ℓhs:59: 1 =? 1 → True
+calc.ℓhs:60: 2 < 3 → True
+calc.ℓhs:61: 2 ≤ 3 → True
+calc.ℓhs:62: 4 ≥ 3.99 → True
+calc.ℓhs:63: 2 ≠ 3 → True
+calc.ℓhs:64: not True → False
+calc.ℓhs:67: exp $ (0 :+ 1) · τc → 1.0 :+ 0.0
+calc.ℓhs:74: i → 0.0 :+ 1.0
+calc.ℓhs:75: π → 3.141592653589793
+calc.ℓhs:76: τ → 6.283185307179586
+calc.ℓhs:77: ℯ → 2.718281828459045
+calc.ℓhs:78: -3 → -3
+calc.ℓhs:81: 0 → 0
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_test.lhs, calc_test.o )
+Linking calc ...
+ghc -fhpc -o calc calc_test.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+rm -f calc.tix
+./calc
+calc.ℓhs:33: 2 + 2 → 4
+calc.ℓhs:34: (+) 2 2 → 4
+calc.ℓhs:35: 31337 × 101 → 3165037
+calc.ℓhs:36: 7.0 / 2.0 → 3.5
+calc.ℓhs:37: 313 ↑ 15 → 27112218957718876716220410905036741257
+calc.ℓhs:38: 2 + (-3) → -1
+calc.ℓhs:39: 3 + (-(13 × 37)) → -478
+calc.ℓhs:40: 2×3 → 6
+calc.ℓhs:41: 2×(-3) → -6
+calc.ℓhs:44: 6 + 3 → 9
+calc.ℓhs:45: 6 - 3 → 3
+calc.ℓhs:46: 6 − 3 → 3
+calc.ℓhs:47: 6 * 3 → 18
+calc.ℓhs:48: 6 · 3 → 18
+calc.ℓhs:49: 6 × 3 → 18
+calc.ℓhs:50: 6 / 3 → 2.0
+calc.ℓhs:51: 6 ÷ 3 → 2.0
+calc.ℓhs:52: 6 ^ 3 → 216
+calc.ℓhs:53: 6 ↑ 3 → 216
+calc.ℓhs:56: True ⋀ False → False
+calc.ℓhs:57: False ⋁ True → True
+calc.ℓhs:59: 1 =? 1 → True
+calc.ℓhs:60: 2 < 3 → True
+calc.ℓhs:61: 2 ≤ 3 → True
+calc.ℓhs:62: 4 ≥ 3.99 → True
+calc.ℓhs:63: 2 ≠ 3 → True
+calc.ℓhs:64: not True → False
+calc.ℓhs:67: exp $ (0 :+ 1) · τc → 1.0 :+ 0.0
+calc.ℓhs:74: i → 0.0 :+ 1.0
+calc.ℓhs:75: π → 3.141592653589793
+calc.ℓhs:76: τ → 6.283185307179586
+calc.ℓhs:77: ℯ → 2.718281828459045
+calc.ℓhs:78: -3 → -3
+calc.ℓhs:81: 0 → 0
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+
+constant.lhs:15:7: Not in scope: `·'
+mk: ghc -fhpc -o ...  : exit status=exit(1)
+sed -f toascii.sed constant.ℓhs > constant.ℓhs
+sed -f toascii.sed uniop.ℓhs > uniop.ℓhs
+sed -f toascii.sed calc.ℓhs > calc.ℓhs
+sed -f toascii.sed calc_test.ℓhs > calc_test.ℓhs
+ghc -fhpc -o calc calc_test.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+mk: exit 1
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_test.lhs, calc_test.o )
+Linking calc ...
+sed -f toascii.sed constant.ℓhs > constant.ℓhs
+ghc -fhpc -o calc calc_test.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+rm -f calc.tix
+./calc
+calc.ℓhs:33: 2 + 2 → 4
+calc.ℓhs:34: (+) 2 2 → 4
+calc.ℓhs:35: 31337 × 101 → 3165037
+calc.ℓhs:36: 7.0 / 2.0 → 3.5
+calc.ℓhs:37: 313 ↑ 15 → 27112218957718876716220410905036741257
+calc.ℓhs:38: 2 + (-3) → -1
+calc.ℓhs:39: 3 + (-(13 × 37)) → -478
+calc.ℓhs:40: 2×3 → 6
+calc.ℓhs:41: 2×(-3) → -6
+calc.ℓhs:44: 6 + 3 → 9
+calc.ℓhs:45: 6 - 3 → 3
+calc.ℓhs:46: 6 − 3 → 3
+calc.ℓhs:47: 6 * 3 → 18
+calc.ℓhs:48: 6 · 3 → 18
+calc.ℓhs:49: 6 × 3 → 18
+calc.ℓhs:50: 6 / 3 → 2.0
+calc.ℓhs:51: 6 ÷ 3 → 2.0
+calc.ℓhs:52: 6 ^ 3 → 216
+calc.ℓhs:53: 6 ↑ 3 → 216
+calc.ℓhs:56: True ⋀ False → False
+calc.ℓhs:57: False ⋁ True → True
+calc.ℓhs:59: 1 =? 1 → True
+calc.ℓhs:60: 2 < 3 → True
+calc.ℓhs:61: 2 ≤ 3 → True
+calc.ℓhs:62: 4 ≥ 3.99 → True
+calc.ℓhs:63: 2 ≠ 3 → True
+calc.ℓhs:64: not True → False
+calc.ℓhs:67: exp $ (0 :+ 1) · τc → 1.0 :+ 0.0
+calc.ℓhs:74: i → 0.0 :+ 1.0
+calc.ℓhs:75: π → 3.141592653589793
+calc.ℓhs:76: τ → 6.283185307179586
+calc.ℓhs:77: ℯ → 2.718281828459045
+calc.ℓhs:78: -3 → -3
+calc.ℓhs:81: 0 → 0
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+
+calc.lhs:54:88: Not in scope: `↑↑'
+mk: ghc -fhpc -o ...  : exit status=exit(1)
+mk: exit 1
+sed -f toascii.sed calc.ℓhs > calc.ℓhs
+sed -f toascii.sed calc_main.ℓhs > calc_main.ℓhs
+ghc -fhpc -o calc calc_main.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+#ghc -fhpc -o calc calc_main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
+Linking calc ...
+sed -f toascii.sed uniop.ℓhs > uniop.ℓhs
+ghc -fhpc -o calc calc_main.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+#ghc -fhpc -o calc calc_main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+rm -f calc.tix
+./calc
+calc.ℓhs:44: 6 + 3 → 9
+calc.ℓhs:45: 6 - 3 → 3
+calc.ℓhs:46: 6 − 3 → 3
+calc.ℓhs:47: 6 * 3 → 18
+calc.ℓhs:48: 6 · 3 → 18
+calc.ℓhs:49: 6 × 3 → 18
+calc.ℓhs:50: 6 / 3 → 2.0
+calc.ℓhs:51: 6 ÷ 3 → 2.0
+calc.ℓhs:52: 6 ^ 3 → 216
+calc.ℓhs:53: 6 ↑ 3 → 216
+calc.ℓhs:54: 6 ↑↑ 3 → 216
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
+Linking calc ...
+sed -f toascii.sed uniop.ℓhs > uniop.ℓhs
+ghc -fhpc -o calc calc_main.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+#ghc -fhpc -o calc calc_main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+rm -f calc.tix
+./calc
+calc.ℓhs:44: 6 + 3 → 9
+calc.ℓhs:45: 6 - 3 → 3
+calc.ℓhs:46: 6 − 3 → 3
+calc.ℓhs:47: 6 * 3 → 18
+calc.ℓhs:48: 6 · 3 → 18
+calc.ℓhs:49: 6 × 3 → 18
+calc.ℓhs:50: 6 / 3 → 2.0
+calc.ℓhs:51: 6 ÷ 3 → 2.0
+calc.ℓhs:52: 6 ^ 3 → 216
+calc.ℓhs:53: 6 ↑ 3 → 216
+calc.ℓhs:54: 6 ↑↑ 3 → 216
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+
+uniop.lhs:125:11: Pattern syntax in expression context: _
+mk: ghc -fhpc -o ...  : exit status=exit(1)
+mk: exit 1
+sed -f toascii.sed uniop.ℓhs > uniop.ℓhs
+sed -f toascii.sed calc.ℓhs > calc.ℓhs
+ghc -fhpc -o calc calc_main.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+#ghc -fhpc -o calc calc_main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+
+uniop.lhs:124:19:
+    Could not deduce (Integral a) from the context (Num a, Integral b)
+      arising from a use of `↑' at uniop.lhs:124:19-36
+    Possible fix:
+      add (Integral a) to the context of the type signature for `↑↑'
+    In the expression: x ↑ (x ↑↑ (y − 1))
+    In the definition of `↑↑': x ↑↑ y | y > 0 = x ↑ (x ↑↑ (y − 1))
+mk: exit 1
+mk: ghc -fhpc -o ...  : exit status=exit(1)
+sed -f toascii.sed uniop.ℓhs > uniop.ℓhs
+ghc -fhpc -o calc calc_main.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+#ghc -fhpc -o calc calc_main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
+Linking calc ...
+sed -f toascii.sed uniop.ℓhs > uniop.ℓhs
+ghc -fhpc -o calc calc_main.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+#ghc -fhpc -o calc calc_main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+rm -f calc.tix
+./calc
+calc.ℓhs:44: 6 + 3 → 9
+calc.ℓhs:45: 6 - 3 → 3
+calc.ℓhs:46: 6 − 3 → 3
+calc.ℓhs:47: 6 * 3 → 18
+calc.ℓhs:48: 6 · 3 → 18
+calc.ℓhs:49: 6 × 3 → 18
+calc.ℓhs:50: 6 / 3 → 2.0
+calc.ℓhs:51: 6 ÷ 3 → 2.0
+calc.ℓhs:52: 6 ^ 3 → 216
+calc.ℓhs:53: 6 ↑ 3 → 216
+calc.ℓhs:54: 3 ↑↑ 2 → 27
+calc.ℓhs:55: 3 ↑↑ 3 → 7625597484987
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+
+uniop.lhs:126:11:
+    Multiple fixity declarations for `↑↑'
+    also at  uniop.lhs:140:2-12
+mk: ghc -fhpc -o ...  : exit status=exit(1)
+sed -f toascii.sed uniop.ℓhs > uniop.ℓhs
+sed -f toascii.sed calc.ℓhs > calc.ℓhs
+ghc -fhpc -o calc calc_main.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+#ghc -fhpc -o calc calc_main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+mk: exit 1
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
+Linking calc ...
+sed -f toascii.sed uniop.ℓhs > uniop.ℓhs
+ghc -fhpc -o calc calc_main.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+#ghc -fhpc -o calc calc_main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+rm -f calc.tix
+./calc
+calc.ℓhs:44: 6 + 3 → 9
+calc.ℓhs:45: 6 - 3 → 3
+calc.ℓhs:46: 6 − 3 → 3
+calc.ℓhs:47: 6 * 3 → 18
+calc.ℓhs:48: 6 · 3 → 18
+calc.ℓhs:49: 6 × 3 → 18
+calc.ℓhs:50: 6 / 3 → 2.0
+calc.ℓhs:51: 6 ÷ 3 → 2.0
+calc.ℓhs:52: 6 ^ 3 → 216
+calc.ℓhs:53: 6 ↑ 3 → 216
+calc.ℓhs:54: 3 ↑↑ 2 → 27
+calc.ℓhs:55: 3 ↑↑ 3 → 7625597484987
+calc.ℓhs:56: 3 ↑↑↑ 2 → 7625597484987
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
+Linking calc ...
+sed -f toascii.sed calc.ℓhs > calc.ℓhs
+ghc -fhpc -o calc calc_main.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+#ghc -fhpc -o calc calc_main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+rm -f calc.tix
+./calc
+calc.ℓhs:44: 6 + 3 → 9
+calc.ℓhs:45: 6 - 3 → 3
+calc.ℓhs:46: 6 − 3 → 3
+calc.ℓhs:47: 6 * 3 → 18
+calc.ℓhs:48: 6 · 3 → 18
+calc.ℓhs:49: 6 × 3 → 18
+calc.ℓhs:50: 6 / 3 → 2.0
+calc.ℓhs:51: 6 ÷ 3 → 2.0
+calc.ℓhs:52: 6 ^ 3 → 216
+calc.ℓhs:53: 6 ↑ 3 → 216
+calc.ℓhs:54: 3 ↑↑ 2 → 27
+calc.ℓhs:55: 3 ↑↑ 3 → 7625597484987
+calc.ℓhs:56: 3 ↑↑↑ 2 → 7625597484987
+calc.ℓhs:57: 2 ↑ 2 → 4
+calc.ℓhs:58: 2 ↑↑ 2 → 4
+calc.ℓhs:59: 2 ↑↑↑ 2 → 4
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
+Linking calc ...
+sed -f toascii.sed calc.ℓhs > calc.ℓhs
+ghc -fhpc -o calc calc_main.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+#ghc -fhpc -o calc calc_main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+rm -f calc.tix
+./calc
+calc.ℓhs:44: 6 + 3 → 9
+calc.ℓhs:45: 6 - 3 → 3
+calc.ℓhs:46: 6 − 3 → 3
+calc.ℓhs:47: 6 * 3 → 18
+calc.ℓhs:48: 6 · 3 → 18
+calc.ℓhs:49: 6 × 3 → 18
+calc.ℓhs:50: 6 / 3 → 2.0
+calc.ℓhs:51: 6 ÷ 3 → 2.0
+calc.ℓhs:52: 6 ^ 3 → 216
+calc.ℓhs:53: 6 ↑ 3 → 216
+calc.ℓhs:54: 3 ↑↑ 2 → 27
+calc.ℓhs:55: 3 ↑↑ 3 → 7625597484987
+calc.ℓhs:56: 3 ↑↑↑ 2 → 7625597484987
+calc.ℓhs:57: 2 ↑ 4 → 16
+calc.ℓhs:58: 2 ↑↑ 3 → 16
+calc.ℓhs:59: 2 ↑↑↑ 2 → 4
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
+Linking calc ...
+sed -f toascii.sed calc.ℓhs > calc.ℓhs
+ghc -fhpc -o calc calc_main.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+#ghc -fhpc -o calc calc_main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+rm -f calc.tix
+./calc
+calc.ℓhs:44: 6 + 3 → 9
+calc.ℓhs:45: 6 - 3 → 3
+calc.ℓhs:46: 6 − 3 → 3
+calc.ℓhs:47: 6 * 3 → 18
+calc.ℓhs:48: 6 · 3 → 18
+calc.ℓhs:49: 6 × 3 → 18
+calc.ℓhs:50: 6 / 3 → 2.0
+calc.ℓhs:51: 6 ÷ 3 → 2.0
+calc.ℓhs:52: 6 ^ 3 → 216
+calc.ℓhs:53: 6 ↑ 3 → 216
+calc.ℓhs:54: 3 ↑↑ 2 → 27
+calc.ℓhs:55: 3 ↑↑ 3 → 7625597484987
+calc.ℓhs:56: 3 ↑↑↑ 2 → 7625597484987
+calc.ℓhs:57: 2 ↑ 4 → 16
+calc.ℓhs:58: 2 ↑↑ 3 → 16
+calc.ℓhs:59: 2 ↑↑↑ 3 → 65536
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
+Linking calc ...
+sed -f toascii.sed calc.ℓhs > calc.ℓhs
+ghc -fhpc -o calc calc_main.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+#ghc -fhpc -o calc calc_main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+rm -f calc.tix
+./calc
+calc.ℓhs:44: 6 + 3 → 9
+calc.ℓhs:45: 6 - 3 → 3
+calc.ℓhs:46: 6 − 3 → 3
+calc.ℓhs:47: 6 * 3 → 18
+calc.ℓhs:48: 6 · 3 → 18
+calc.ℓhs:49: 6 × 3 → 18
+calc.ℓhs:50: 6 / 3 → 2.0
+calc.ℓhs:51: 6 ÷ 3 → 2.0
+calc.ℓhs:52: 6 ^ 3 → 216
+calc.ℓhs:53: 6 ↑ 3 → 216
+calc.ℓhs:54: 3 ↑↑ 2 → 27
+calc.ℓhs:55: 3 ↑↑ 3 → 7625597484987
+calc.ℓhs:56: 3 ↑↑↑ 2 → 7625597484987
+calc.ℓhs:57: 2 ↑ 5 → 32
+calc.ℓhs:58: 2 ↑↑ 4 → 65536
+calc.ℓhs:59: 2 ↑↑↑ 3 → 65536
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
+Linking calc ...
+mk: exit 1
+25091: signal: kill
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
+Linking calc ...
+sed -f toascii.sed calc.ℓhs > calc.ℓhs
+ghc -fhpc -o calc calc_main.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+#ghc -fhpc -o calc calc_main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+rm -f calc.tix
+./calc
+calc.ℓhs:44: 6 + 3 → 9
+calc.ℓhs:45: 6 - 3 → 3
+calc.ℓhs:46: 6 − 3 → 3
+calc.ℓhs:47: 6 * 3 → 18
+calc.ℓhs:48: 6 · 3 → 18
+calc.ℓhs:49: 6 × 3 → 18
+calc.ℓhs:50: 6 / 3 → 2.0
+calc.ℓhs:51: 6 ÷ 3 → 2.0
+calc.ℓhs:52: 6 ^ 3 → 216
+calc.ℓhs:53: 6 ↑ 3 → 216
+calc.ℓhs:54: 3 ↑↑ 2 → 27
+calc.ℓhs:55: 3 ↑↑ 3 → 7625597484987
+calc.ℓhs:56: 3 ↑↑↑ 2 → 7625597484987
+calc.ℓhs:57: 2 ↑ 8 → 256
+calc.ℓhs:58: 2 ↑↑ 4 → 65536
+calc.ℓhs:59: 2 ↑↑↑ 3 → 65536
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
+Linking calc ...
+sed -f toascii.sed calc.ℓhs > calc.ℓhs
+ghc -fhpc -o calc calc_main.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+#ghc -fhpc -o calc calc_main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+rm -f calc.tix
+./calc
+calc.ℓhs:44: 6 + 3 → 9
+calc.ℓhs:45: 6 - 3 → 3
+calc.ℓhs:46: 6 − 3 → 3
+calc.ℓhs:47: 6 * 3 → 18
+calc.ℓhs:48: 6 · 3 → 18
+calc.ℓhs:49: 6 × 3 → 18
+calc.ℓhs:50: 6 / 3 → 2.0
+calc.ℓhs:51: 6 ÷ 3 → 2.0
+calc.ℓhs:52: 6 ^ 3 → 216
+calc.ℓhs:53: 6 ↑ 3 → 216
+calc.ℓhs:54: 3 ↑↑ 2 → 27
+calc.ℓhs:55: 3 ↑↑ 3 → 7625597484987
+calc.ℓhs:56: 3 ↑↑↑ 2 → 7625597484987
+calc.ℓhs:57: 2 ↑ 16 → 65536
+calc.ℓhs:58: 2 ↑↑ 4 → 65536
+calc.ℓhs:59: 2 ↑↑↑ 3 → 65536
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
+Linking calc ...
+mk: exit 1
+25255: signal: kill
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
+Linking calc ...
+sed -f toascii.sed calc.ℓhs > calc.ℓhs
+ghc -fhpc -o calc calc_main.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+#ghc -fhpc -o calc calc_main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+rm -f calc.tix
+./calc
+calc.ℓhs:44: 6 + 3 → 9
+calc.ℓhs:45: 6 - 3 → 3
+calc.ℓhs:46: 6 − 3 → 3
+calc.ℓhs:47: 6 * 3 → 18
+calc.ℓhs:48: 6 · 3 → 18
+calc.ℓhs:49: 6 × 3 → 18
+calc.ℓhs:50: 6 / 3 → 2.0
+calc.ℓhs:51: 6 ÷ 3 → 2.0
+calc.ℓhs:52: 6 ^ 3 → 216
+calc.ℓhs:53: 6 ↑ 3 → 216
+calc.ℓhs:54: 3 ↑↑ 2 → 27
+calc.ℓhs:55: 3 ↑↑ 3 → 7625597484987
+calc.ℓhs:56: 3 ↑↑↑ 2 → 7625597484987
+calc.ℓhs:57: 2 ↑ 16 → 65536
+calc.ℓhs:58: 2 ↑↑ 4 → 65536
+calc.ℓhs:59: 2 ↑↑↑ 3 → 65536
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
+Linking calc ...
+ghc -fhpc -o calc calc_main.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+#ghc -fhpc -o calc calc_main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+rm -f calc.tix
+./calc
+calc.ℓhs:44: 6 + 3 → 9
+calc.ℓhs:45: 6 - 3 → 3
+calc.ℓhs:46: 6 − 3 → 3
+calc.ℓhs:47: 6 * 3 → 18
+calc.ℓhs:48: 6 · 3 → 18
+calc.ℓhs:49: 6 × 3 → 18
+calc.ℓhs:50: 6 / 3 → 2.0
+calc.ℓhs:51: 6 ÷ 3 → 2.0
+calc.ℓhs:52: 6 ^ 3 → 216
+calc.ℓhs:53: 6 ↑ 3 → 216
+calc.ℓhs:54: 3 ↑↑ 2 → 27
+calc.ℓhs:55: 3 ↑↑ 3 → 7625597484987
+calc.ℓhs:56: 3 ↑↑↑ 2 → 7625597484987
+calc.ℓhs:57: 2 ↑ 16 → 65536
+calc.ℓhs:58: 2 ↑↑ 4 → 65536
+calc.ℓhs:59: 2 ↑↑↑ 3 → 65536
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
+Linking calc ...
+sed -f toascii.sed calc.ℓhs > calc.ℓhs
+ghc -fhpc -o calc calc_main.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+#ghc -fhpc -o calc calc_main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+rm -f calc.tix
+./calc
+calc.ℓhs:87: 1 + (4 * 4) → 17
+calc.ℓhs:88: 1 + 4 * 4 → 17
+GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
+Loading package ghc-prim ... linking ... done.
+Loading package integer-gmp ... linking ... done.
+Loading package base ... linking ... done.
+Prelude> class (Eq a, Show a) => Num a where
+  (+) :: a -> a -> a
+  ...
+  	-- Defined in GHC.Num
+infixl 6 +
+Prelude> Leaving GHCi.
+[1 of 4] Compiling UniOp            ( uniop.lhs, uniop.o )
+[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
+[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
+[4 of 4] Compiling Main             ( calc_test.lhs, calc_test.o )
+Linking calc ...
+sed -f toascii.sed uniop.ℓhs > uniop.ℓhs
+ghc -fhpc -o calc calc_test.ℓhs calc.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes
+rm -f calc.tix
+./calc
+calc.ℓhs:33: 2 + 2 → 4
+calc.ℓhs:34: (+) 2 2 → 4
+calc.ℓhs:35: 31337 × 101 → 3165037
+calc.ℓhs:36: 7.0 / 2.0 → 3.5
+calc.ℓhs:37: 313 ↑ 15 → 27112218957718876716220410905036741257
+calc.ℓhs:38: 2 + (-3) → -1
+calc.ℓhs:39: 3 + (-(13 × 37)) → -478
+calc.ℓhs:40: 2×3 → 6
+calc.ℓhs:41: 2×(-3) → -6
+calc.ℓhs:44: 6 + 3 → 9
+calc.ℓhs:45: 6 - 3 → 3
+calc.ℓhs:46: 6 − 3 → 3
+calc.ℓhs:47: 6 * 3 → 18
+calc.ℓhs:48: 6 · 3 → 18
+calc.ℓhs:49: 6 × 3 → 18
+calc.ℓhs:50: 6 / 3 → 2.0
+calc.ℓhs:51: 6 ÷ 3 → 2.0
+calc.ℓhs:52: 6 ^ 3 → 216
+calc.ℓhs:53: 6 ↑ 3 → 216
+calc.ℓhs:54: 3 ↑↑ 2 → 27
+calc.ℓhs:55: 3 ↑↑ 3 → 7625597484987
+calc.ℓhs:56: 3 ↑↑↑ 2 → 7625597484987
+calc.ℓhs:57: 2 ↑ 16 → 65536
+calc.ℓhs:58: 2 ↑↑ 4 → 65536
+calc.ℓhs:59: 2 ↑↑↑ 3 → 65536
+calc.ℓhs:62: True ⋀ False → False
+calc.ℓhs:63: False ⋁ True → True
+calc.ℓhs:65: 1 =? 1 → True
+calc.ℓhs:66: 2 < 3 → True
+calc.ℓhs:67: 2 ≤ 3 → True
+calc.ℓhs:68: 4 ≥ 3.99 → True
+calc.ℓhs:69: 2 ≠ 3 → True
+calc.ℓhs:70: not True → False
+calc.ℓhs:73: exp $ (0 :+ 1) · τc → 1.0 :+ 0.0
+calc.ℓhs:80: i → 0.0 :+ 1.0
+calc.ℓhs:81: π → 3.141592653589793
+calc.ℓhs:82: τ → 6.283185307179586
+calc.ℓhs:83: ℯ → 2.718281828459045
+calc.ℓhs:84: -3 → -3
+calc.ℓhs:91: 0 → 0
+GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
+Loading package ghc-prim ... linking ... done.
+Loading package integer-gmp ... linking ... done.
+Loading package base ... linking ... done.
+Prelude> class (Fractional a) => Floating a where
+  ...
+  (**) :: a -> a -> a
+  ...
+  	-- Defined in GHC.Float
+infixr 8 **
+Prelude> Leaving GHCi.
+f          1          10         471         495  98.1521739 
+         10          56         692           0           0 /home/jdc/git/rwhaskell/ch1/guide Del Snarf Undo | Look 
diff --git "a/ch1/calc.\342\204\223hs" "b/ch1/calc.\342\204\223hs"
index bd5e01a..84a6773 100644
--- "a/ch1/calc.\342\204\223hs"
+++ "b/ch1/calc.\342\204\223hs"
@@ -16,7 +16,7 @@ nb cpp haskell define
 > import Constant
 > import Data.Complex
 > import Data.Number.CReal
-> import UniOp
+> import UnicodeOperators
 
 > pastShows ⇐ do
 > 	arithmetic
@@ -24,17 +24,19 @@ nb cpp haskell define
 > 	boolean
 > 	complex
 > 	constant
+> 	exponentiation
+> 	precedence
 > 	zero
 
 > lastShow ⇐ do
-> 	boolean
+> 	exponentiation
 
 > arithmetic ⇐ do
 > 	putStrLn (showExprLn (2 + 2))
 > 	putStrLn (showExprLn ((+) 2 2))
 > 	putStrLn (showExprLn (31337 × 101))
 > 	putStrLn (showExprLn (7.0 / 2.0))
-> 	putStrLn (showExprLn (313 ↑ 15))
+> 	putStrLn (showExprLn (313 ↥ 15))
 > 	putStrLn (showExprLn (2 + (-3))) — Precedence parsing error: cannot mix ‘+’ [infixl 6] and prefix ‘-’ [infixl 6] in the same infix expression.
 > 	putStrLn (showExprLn (3 + (-(13 × 37))))
 > 	putStrLn (showExprLn (2×3))
@@ -50,7 +52,6 @@ nb cpp haskell define
 > 	putStrLn (showExprLn (6 / 3))
 > 	putStrLn (showExprLn (6 ÷ 3))
 > 	putStrLn (showExprLn (6 ^ 3))
-> 	putStrLn (showExprLn (6 ↑ 3))
 
 > boolean ⇐ do
 > 	putStrLn (showExprLn (True ⋀ False))
@@ -66,6 +67,7 @@ nb cpp haskell define
 > complex ⇐ do
 > 	putStrLn (showExprLn (exp $ (0 :+ 1) · τc)) — e↑(i·τ) → 1+0
 
+nb τ tau complex haskell notation constant
 τ won't be complex unless its pi is so expressed.
 
 > τc ⇐ 2·(pi :: Complex CReal)
@@ -77,5 +79,21 @@ nb cpp haskell define
 > 	putStrLn (showExprLn (ℯ))
 > 	putStrLn (showExprLn (-3))
 
+> exponentiation ⇐ do
+> 	putStrLn (showExprLn (6 ↥ 3))
+> 	putStrLn (showExprLn (3 ↥↥ 2))
+> 	putStrLn (showExprLn (3 ↥↥ 3))
+> 	putStrLn (showExprLn (3 ↥↥↥ 2))
+> 	putStrLn (showExprLn (2 ↥ 16))
+> 	putStrLn (showExprLn (2 ↥↥ 4))
+> 	putStrLn (showExprLn (2 ↥↥↥ 3))
+> 	putStrLn (showExprLn ((ℯ ↑ π) − π))
+> 	putStrLn (showExprLn ((ℯ ↑ τ) − τ))
+> 	putStrLn (showExprLn (9 ↑ 0.5))
+
+> precedence ⇐ do
+> 	putStrLn (showExprLn (1 + (4 * 4)))
+> 	putStrLn (showExprLn (1 + 4 * 4))
+
 > zero ⇐ do
 > 	putStrLn (showExprLn (0))
diff --git "a/ch1/calc_main.\342\204\223hs" "b/ch1/calc_main.\342\204\223hs"
index b955ffb..c5df8eb 100644
--- "a/ch1/calc_main.\342\204\223hs"
+++ "b/ch1/calc_main.\342\204\223hs"
@@ -1,6 +1,6 @@
 > import Constant
 > import Shows
-> import UniOp
+> import UnicodeOperators
 
 > main = do
 > 	lastShow
diff --git "a/ch1/calc_test.\342\204\223hs" "b/ch1/calc_test.\342\204\223hs"
index 297063b..cf7600f 100644
--- "a/ch1/calc_test.\342\204\223hs"
+++ "b/ch1/calc_test.\342\204\223hs"
@@ -1,6 +1,6 @@
 > import Constant
 > import Shows
-> import UniOp
+> import UnicodeOperators
 
 > main = do
 > 	pastShows
diff --git "a/ch1/constant.\342\204\223hs" "b/ch1/constant.\342\204\223hs"
index f8ecd95..806e98a 100644
--- "a/ch1/constant.\342\204\223hs"
+++ "b/ch1/constant.\342\204\223hs"
@@ -1,6 +1,7 @@
 > module Constant where
 > import Data.Complex
 > import Data.Number.CReal
+> import UnicodeOperators
 
 nb i imaginary complex number haskell notation constant
 
@@ -10,7 +11,7 @@ nb π pi haskell notation constant
 
 > π ⇐ pi
 
-nb τ tau haskell notation constant
+nb τ tau haskell notation constant real
 
 > τ ⇐ 2·π
 
diff --git a/ch1/guide b/ch1/guide
index 7fa46fb..7fd14ed 100644
--- a/ch1/guide
+++ b/ch1/guide
@@ -16,7 +16,7 @@ touch *.ℓhs
 |sort|uniq
 
 ghci <<EOF
-:info ^
+:info **
 EOF
 
 Eight, sir; seven, sir; six, sir; five, sir; four, sir; three, sir; two, sir; one! [beat] Tenser, said the Tensor. Tenser, said the Tensor. Tension, apprehension, and dissension have begun. [beat]
\ No newline at end of file
diff --git a/ch1/mkfile b/ch1/mkfile
index d30d9c6..1b104f7 100644
--- a/ch1/mkfile
+++ b/ch1/mkfile
@@ -6,16 +6,16 @@ ELF = ${SLHS_ALL:%.ℓhs=%}
 	sed -f toascii.sed $stem.ℓhs > $stem.lhs
 
 #%: %.lhs
-#	ghc -o $stem $stem.lhs -XUnicodeSyntax 2>&1 | sed 's,\.lhs,.ℓhs,'
+#	ghc -o $stem $stem.lhs 2>&1 | sed 's,\.lhs,.ℓhs,'
 
 %_main: constant.lhs
 
-%_main: uniop.lhs
+%_main: UnicodeOperators.lhs
 
 %_main: %.lhs
 
 %_main: %_main.lhs
-	ghc -fhpc -o $stem ${stem}_main.lhs $stem.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+	ghc -fhpc -o $stem ${stem}_main.lhs $stem.lhs constant.lhs UnicodeOperators.lhs --make -fforce-recomp -XRankNTypes
 	#ghc -fhpc -o $stem ${stem}_main.lhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
 
 %.main: %_main
@@ -24,12 +24,12 @@ ELF = ${SLHS_ALL:%.ℓhs=%}
 
 %_test: constant.lhs
 
-%_test: uniop.lhs
+%_test: UnicodeOperators.lhs
 
 %_test: %.lhs
 
 %_test: %_test.lhs
-	ghc -fhpc -o $stem ${stem}_test.lhs $stem.lhs constant.lhs uniop.lhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
+	ghc -fhpc -o $stem ${stem}_test.lhs $stem.lhs constant.lhs UnicodeOperators.lhs --make -fforce-recomp -XRankNTypes
 
 %.test: %_test
 	rm -f $stem.tix
[1 of 4] Compiling UnicodeOperators ( UnicodeOperators.lhs, UnicodeOperators.o )
[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
Linking calc ...
sed -f toascii.sed UnicodeOperators.ℓhs > UnicodeOperators.ℓhs
ghc -fhpc -o calc calc_main.ℓhs calc.lhs constant.lhs UnicodeOperators.lhs --make -fforce-recomp -XRankNTypes
#ghc -fhpc -o calc calc_main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
rm -f calc.tix
./calc
calc.ℓhs:83: 6 ↥ 3 → 216
calc.ℓhs:84: 3 ↥↥ 2 → 27
calc.ℓhs:85: 3 ↥↥ 3 → 7625597484987
calc.ℓhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.ℓhs:87: 2 ↥ 16 → 65536
calc.ℓhs:88: 2 ↥↥ 4 → 65536
calc.ℓhs:89: 2 ↥↥↥ 3 → 65536
calc.ℓhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.ℓhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.ℓhs:92: 9 ↑ 0.5 → 3.0
list.ℓhs
list_main.ℓhs
list_test.ℓhs
cp calc.ℓhs list.ℓhs
cp calc_main.ℓhs list_main.ℓhs
cp calc_test.ℓhs list_test.ℓhs
[1 of 4] Compiling UnicodeOperators ( UnicodeOperators.lhs, UnicodeOperators.o )
[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
[3 of 4] Compiling Shows            ( list.lhs, list.o )

list.lhs:16:76:
    Ambiguous type variable `a' in the constraint:
      `Show a' arising from a use of `show' at list.lhs:16:76-84
    Probable fix: add a type signature that fixes these type variable(s)
mk: ghc -fhpc -o ...  : exit status=exit(1)
sed -f toascii.sed constant.ℓhs > constant.ℓhs
sed -f toascii.sed UnicodeOperators.ℓhs > UnicodeOperators.ℓhs
sed -f toascii.sed list.ℓhs > list.ℓhs
sed -f toascii.sed list_main.ℓhs > list_main.ℓhs
ghc -fhpc -o list list_main.ℓhs list.lhs constant.lhs UnicodeOperators.lhs --make -fforce-recomp -XRankNTypes
#ghc -fhpc -o list list_main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
mk: exit 1

<no location info>: can't find file: .lhs
mk: ghc -fhpc -o ...  : exit status=exit(1)
mk: exit 1
ghc -fhpc -o  _main.ℓhs .lhs --make -fforce-recomp

<no location info>: can't find file: .lhs
mk: ghc -fhpc -o ...  : exit status=exit(1)
mk: exit 1
ghc -fhpc -o  _main.ℓhs .lhs --make -fforce-recomp

<no location info>: can't find file: .lhs
mk: ghc -fhpc -o ...  : exit status=exit(1)
mk: exit 1
ghc -fhpc -o  _main.ℓhs .lhs --make -fforce-recomp

<no location info>: can't find file: .lhs
mk: ghc -fhpc -o ...  : exit status=exit(1)
mk: exit 1
sed -f toascii.sed calc_main.ℓhs > calc_main.ℓhs
sed -f toascii.sed calc.ℓhs > calc.ℓhs
ghc -fhpc -o  _main.ℓhs .lhs constant.lhs UnicodeOperators.lhs --make -fforce-recomp -XRankNTypes
#ghc -fhpc -o  _main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax

<no location info>: can't find file: .lhs
mk: ghc -fhpc -o ...  : exit status=exit(1)
mk: exit 1
ghc -fhpc -o  _main.ℓhs .lhs constant.lhs UnicodeOperators.lhs --make -fforce-recomp -XRankNTypes
#ghc -fhpc -o  _main.ℓhs --make -fforce-recomp -XRankNTypes -XUnicodeSyntax
[1 of 4] Compiling UnicodeOperators ( UnicodeOperators.lhs, UnicodeOperators.o )
[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
Linking calc ...
ghc -fhpc -o calc calc_main.ℓhs calc.lhs constant.lhs UnicodeOperators.lhs --make -fforce-recomp -XRankNTypes
calc.lhs:83: 6 ↥ 3 → 216
calc.lhs:84: 3 ↥↥ 2 → 27
calc.lhs:85: 3 ↥↥ 3 → 7625597484987
calc.lhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.lhs:87: 2 ↥ 16 → 65536
calc.lhs:88: 2 ↥↥ 4 → 65536
calc.lhs:89: 2 ↥↥↥ 3 → 65536
calc.lhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.lhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.lhs:92: 9 ↑ 0.5 → 3.0
[1 of 4] Compiling UnicodeOperators ( UnicodeOperators.lhs, UnicodeOperators.o )
[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
Linking calc_main ...
ghc -fhpc -o calc_main calc_main.ℓhs calc.lhs constant.lhs UnicodeOperators.lhs --make -fforce-recomp -XRankNTypes
calc.lhs:83: 6 ↥ 3 → 216
calc.lhs:84: 3 ↥↥ 2 → 27
calc.lhs:85: 3 ↥↥ 3 → 7625597484987
calc.lhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.lhs:87: 2 ↥ 16 → 65536
calc.lhs:88: 2 ↥↥ 4 → 65536
calc.lhs:89: 2 ↥↥↥ 3 → 65536
calc.lhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.lhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.lhs:92: 9 ↑ 0.5 → 3.0
[1 of 4] Compiling UnicodeOperators ( UnicodeOperators.lhs, UnicodeOperators.o )
[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
[4 of 4] Compiling Main             ( calc_test.lhs, calc_test.o )
Linking calc_test ...
sed -f toascii.sed calc_test.ℓhs > calc_test.ℓhs
ghc -fhpc -o calc_test calc_test.ℓhs calc.lhs constant.lhs UnicodeOperators.lhs --make -fforce-recomp -XRankNTypes
rm -f calc.tix
./calc
calc.ℓhs:83: 6 ↥ 3 → 216
calc.ℓhs:84: 3 ↥↥ 2 → 27
calc.ℓhs:85: 3 ↥↥ 3 → 7625597484987
calc.ℓhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.ℓhs:87: 2 ↥ 16 → 65536
calc.ℓhs:88: 2 ↥↥ 4 → 65536
calc.ℓhs:89: 2 ↥↥↥ 3 → 65536
calc.ℓhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.ℓhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.ℓhs:92: 9 ↑ 0.5 → 3.0
rm -f calc.tix
./calc
calc.ℓhs:83: 6 ↥ 3 → 216
calc.ℓhs:84: 3 ↥↥ 2 → 27
calc.ℓhs:85: 3 ↥↥ 3 → 7625597484987
calc.ℓhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.ℓhs:87: 2 ↥ 16 → 65536
calc.ℓhs:88: 2 ↥↥ 4 → 65536
calc.ℓhs:89: 2 ↥↥↥ 3 → 65536
calc.ℓhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.ℓhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.ℓhs:92: 9 ↑ 0.5 → 3.0
rm -f calc.tix
./calc
calc.ℓhs:83: 6 ↥ 3 → 216
calc.ℓhs:84: 3 ↥↥ 2 → 27
calc.ℓhs:85: 3 ↥↥ 3 → 7625597484987
calc.ℓhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.ℓhs:87: 2 ↥ 16 → 65536
calc.ℓhs:88: 2 ↥↥ 4 → 65536
calc.ℓhs:89: 2 ↥↥↥ 3 → 65536
calc.ℓhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.ℓhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.ℓhs:92: 9 ↑ 0.5 → 3.0
rm -f $stem_test.tix
./calc
calc.ℓhs:83: 6 ↥ 3 → 216
calc.ℓhs:84: 3 ↥↥ 2 → 27
calc.ℓhs:85: 3 ↥↥ 3 → 7625597484987
calc.ℓhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.ℓhs:87: 2 ↥ 16 → 65536
calc.ℓhs:88: 2 ↥↥ 4 → 65536
calc.ℓhs:89: 2 ↥↥↥ 3 → 65536
calc.ℓhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.ℓhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.ℓhs:92: 9 ↑ 0.5 → 3.0
rm -f $stem_test.tix
./calc
calc.ℓhs:83: 6 ↥ 3 → 216
calc.ℓhs:84: 3 ↥↥ 2 → 27
calc.ℓhs:85: 3 ↥↥ 3 → 7625597484987
calc.ℓhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.ℓhs:87: 2 ↥ 16 → 65536
calc.ℓhs:88: 2 ↥↥ 4 → 65536
calc.ℓhs:89: 2 ↥↥↥ 3 → 65536
calc.ℓhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.ℓhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.ℓhs:92: 9 ↑ 0.5 → 3.0
sh: ./: Permission denied
mk: exit 1
mk: rm -f $stem_main.tix ./$stem_main  : exit status=exit(126)
rm -f $stem_main.tix
./$stem_main
rm -f $stem_main.tix
./calc_main
calc.ℓhs:83: 6 ↥ 3 → 216
calc.ℓhs:84: 3 ↥↥ 2 → 27
calc.ℓhs:85: 3 ↥↥ 3 → 7625597484987
calc.ℓhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.ℓhs:87: 2 ↥ 16 → 65536
calc.ℓhs:88: 2 ↥↥ 4 → 65536
calc.ℓhs:89: 2 ↥↥↥ 3 → 65536
calc.ℓhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.ℓhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.ℓhs:92: 9 ↑ 0.5 → 3.0
rm -f $stem_test.tix
./calc_test
calc.ℓhs:35: 2 + 2 → 4
calc.ℓhs:36: (+) 2 2 → 4
calc.ℓhs:37: 31337 × 101 → 3165037
calc.ℓhs:38: 7.0 / 2.0 → 3.5
calc.ℓhs:39: 313 ↥ 15 → 27112218957718876716220410905036741257
calc.ℓhs:40: 2 + (-3) → -1
calc.ℓhs:41: 3 + (-(13 × 37)) → -478
calc.ℓhs:42: 2×3 → 6
calc.ℓhs:43: 2×(-3) → -6
calc.ℓhs:46: 6 + 3 → 9
calc.ℓhs:47: 6 - 3 → 3
calc.ℓhs:48: 6 − 3 → 3
calc.ℓhs:49: 6 * 3 → 18
calc.ℓhs:50: 6 · 3 → 18
calc.ℓhs:51: 6 × 3 → 18
calc.ℓhs:52: 6 / 3 → 2.0
calc.ℓhs:53: 6 ÷ 3 → 2.0
calc.ℓhs:54: 6 ^ 3 → 216
calc.ℓhs:57: True ⋀ False → False
calc.ℓhs:58: False ⋁ True → True
calc.ℓhs:60: 1 =? 1 → True
calc.ℓhs:61: 2 < 3 → True
calc.ℓhs:62: 2 ≤ 3 → True
calc.ℓhs:63: 4 ≥ 3.99 → True
calc.ℓhs:64: 2 ≠ 3 → True
calc.ℓhs:65: not True → False
calc.ℓhs:68: exp $ (0 :+ 1) · τc → 1.0 :+ 0.0
calc.ℓhs:76: i → 0.0 :+ 1.0
calc.ℓhs:77: π → 3.141592653589793
calc.ℓhs:78: τ → 6.283185307179586
calc.ℓhs:79: ℯ → 2.718281828459045
calc.ℓhs:80: -3 → -3
calc.ℓhs:83: 6 ↥ 3 → 216
calc.ℓhs:84: 3 ↥↥ 2 → 27
calc.ℓhs:85: 3 ↥↥ 3 → 7625597484987
calc.ℓhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.ℓhs:87: 2 ↥ 16 → 65536
calc.ℓhs:88: 2 ↥↥ 4 → 65536
calc.ℓhs:89: 2 ↥↥↥ 3 → 65536
calc.ℓhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.ℓhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.ℓhs:92: 9 ↑ 0.5 → 3.0
calc.ℓhs:95: 1 + (4 * 4) → 17
calc.ℓhs:96: 1 + 4 * 4 → 17
calc.ℓhs:99: 0 → 0
sh: mk: exit 1
./list_main: not found
mk: rm -f $stem_main.tix ./list_main  : exit status=exit(127)
rm -f $stem_main.tix
./list_main
rm -f $stem_main.tix
./calc_main
calc.ℓhs:83: 6 ↥ 3 → 216
calc.ℓhs:84: 3 ↥↥ 2 → 27
calc.ℓhs:85: 3 ↥↥ 3 → 7625597484987
calc.ℓhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.ℓhs:87: 2 ↥ 16 → 65536
calc.ℓhs:88: 2 ↥↥ 4 → 65536
calc.ℓhs:89: 2 ↥↥↥ 3 → 65536
calc.ℓhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.ℓhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.ℓhs:92: 9 ↑ 0.5 → 3.0
rm -f $stem_test.tix
./calc_test
calc.ℓhs:35: 2 + 2 → 4
calc.ℓhs:36: (+) 2 2 → 4
calc.ℓhs:37: 31337 × 101 → 3165037
calc.ℓhs:38: 7.0 / 2.0 → 3.5
calc.ℓhs:39: 313 ↥ 15 → 27112218957718876716220410905036741257
calc.ℓhs:40: 2 + (-3) → -1
calc.ℓhs:41: 3 + (-(13 × 37)) → -478
calc.ℓhs:42: 2×3 → 6
calc.ℓhs:43: 2×(-3) → -6
calc.ℓhs:46: 6 + 3 → 9
calc.ℓhs:47: 6 - 3 → 3
calc.ℓhs:48: 6 − 3 → 3
calc.ℓhs:49: 6 * 3 → 18
calc.ℓhs:50: 6 · 3 → 18
calc.ℓhs:51: 6 × 3 → 18
calc.ℓhs:52: 6 / 3 → 2.0
calc.ℓhs:53: 6 ÷ 3 → 2.0
calc.ℓhs:54: 6 ^ 3 → 216
calc.ℓhs:57: True ⋀ False → False
calc.ℓhs:58: False ⋁ True → True
calc.ℓhs:60: 1 =? 1 → True
calc.ℓhs:61: 2 < 3 → True
calc.ℓhs:62: 2 ≤ 3 → True
calc.ℓhs:63: 4 ≥ 3.99 → True
calc.ℓhs:64: 2 ≠ 3 → True
calc.ℓhs:65: not True → False
calc.ℓhs:68: exp $ (0 :+ 1) · τc → 1.0 :+ 0.0
calc.ℓhs:76: i → 0.0 :+ 1.0
calc.ℓhs:77: π → 3.141592653589793
calc.ℓhs:78: τ → 6.283185307179586
calc.ℓhs:79: ℯ → 2.718281828459045
calc.ℓhs:80: -3 → -3
calc.ℓhs:83: 6 ↥ 3 → 216
calc.ℓhs:84: 3 ↥↥ 2 → 27
calc.ℓhs:85: 3 ↥↥ 3 → 7625597484987
calc.ℓhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.ℓhs:87: 2 ↥ 16 → 65536
calc.ℓhs:88: 2 ↥↥ 4 → 65536
calc.ℓhs:89: 2 ↥↥↥ 3 → 65536
calc.ℓhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.ℓhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.ℓhs:92: 9 ↑ 0.5 → 3.0
calc.ℓhs:95: 1 + (4 * 4) → 17
calc.ℓhs:96: 1 + 4 * 4 → 17
calc.ℓhs:99: 0 → 0
[1 of 2] Compiling Shows            ( list.lhs, list.o )

list.lhs:16:76:
    Ambiguous type variable `a' in the constraint:
      `Show a' arising from a use of `show' at list.lhs:16:76-84
    Probable fix: add a type signature that fixes these type variable(s)
mk: ghc -fhpc -o ...  : exit status=exit(1)
mk: exit 1
ghc -fhpc -o list_main list_main.ℓhs list.lhs --make -fforce-recomp
[1 of 2] Compiling Shows            ( list.lhs, list.o )

list.lhs:16:76:
    Ambiguous type variable `a' in the constraint:
      `Show a' arising from a use of `show' at list.lhs:16:76-84
    Probable fix: add a type signature that fixes these type variable(s)
mk: ghc -fhpc -o ...  : exit status=exit(1)
mk: exit 1
ghc -fhpc -o list_main list_main.ℓhs list.lhs --make -fforce-recomp
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
[1 of 2] Compiling Shows            ( list.lhs, list.o )

list.lhs:16:76:
    Ambiguous type variable `a' in the constraint:
      `Show a' arising from a use of `show' at list.lhs:16:76-84
    Probable fix: add a type signature that fixes these type variable(s)
mk: exit 1
mk: ghc -fhpc -o ...  : exit status=exit(1)
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
[1 of 2] Compiling Shows            ( list.lhs, list.o )

list.lhs:16:76:
    Ambiguous type variable `a' in the constraint:
      `Show a' arising from a use of `show' at list.lhs:16:76-84
    Probable fix: add a type signature that fixes these type variable(s)
mk: ghc -fhpc -o ...  : exit status=exit(1)
mk: exit 1
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> data [] a = [] | a : [a] 	-- Defined in GHC.Types
instance (Eq a) => Eq [a] -- Defined in GHC.Base
instance Monad [] -- Defined in GHC.Base
instance Functor [] -- Defined in GHC.Base
instance (Ord a) => Ord [a] -- Defined in GHC.Base
instance (Read a) => Read [a] -- Defined in GHC.Read
instance (Show a) => Show [a] -- Defined in GHC.Show
Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> 
<interactive>:1:2: parse error on input `::'
Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> 
<interactive>:1:2: parse error on input `::'
Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> data [] a = [] | a : [a] 	-- Defined in GHC.Types
instance (Eq a) => Eq [a] -- Defined in GHC.Base
instance Monad [] -- Defined in GHC.Base
instance Functor [] -- Defined in GHC.Base
instance (Ord a) => Ord [a] -- Defined in GHC.Base
instance (Read a) => Read [a] -- Defined in GHC.Read
instance (Show a) => Show [a] -- Defined in GHC.Show

<interactive>:1:0: parse error on input `::'
Prelude> Leaving GHCi.
[1 of 2] Compiling Shows            ( list.lhs, list.o )

list.lhs:16:76:
    Ambiguous type variable `a' in the constraint:
      `Show a' arising from a use of `show' at list.lhs:16:76-84
    Probable fix: add a type signature that fixes these type variable(s)
mk: ghc -fhpc -o ...  : exit status=exit(1)
ghc -fhpc -o list_main list_main.ℓhs list.lhs --make -fforce-recomp
mk: exit 1
rm -f $stem_main.tix
./calc_main
calc.ℓhs:83: 6 ↥ 3 → 216
calc.ℓhs:84: 3 ↥↥ 2 → 27
calc.ℓhs:85: 3 ↥↥ 3 → 7625597484987
calc.ℓhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.ℓhs:87: 2 ↥ 16 → 65536
calc.ℓhs:88: 2 ↥↥ 4 → 65536
calc.ℓhs:89: 2 ↥↥↥ 3 → 65536
calc.ℓhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.ℓhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.ℓhs:92: 9 ↑ 0.5 → 3.0
rm -f $stem_test.tix
./calc_test
calc.ℓhs:35: 2 + 2 → 4
calc.ℓhs:36: (+) 2 2 → 4
calc.ℓhs:37: 31337 × 101 → 3165037
calc.ℓhs:38: 7.0 / 2.0 → 3.5
calc.ℓhs:39: 313 ↥ 15 → 27112218957718876716220410905036741257
calc.ℓhs:40: 2 + (-3) → -1
calc.ℓhs:41: 3 + (-(13 × 37)) → -478
calc.ℓhs:42: 2×3 → 6
calc.ℓhs:43: 2×(-3) → -6
calc.ℓhs:46: 6 + 3 → 9
calc.ℓhs:47: 6 - 3 → 3
calc.ℓhs:48: 6 − 3 → 3
calc.ℓhs:49: 6 * 3 → 18
calc.ℓhs:50: 6 · 3 → 18
calc.ℓhs:51: 6 × 3 → 18
calc.ℓhs:52: 6 / 3 → 2.0
calc.ℓhs:53: 6 ÷ 3 → 2.0
calc.ℓhs:54: 6 ^ 3 → 216
calc.ℓhs:57: True ⋀ False → False
calc.ℓhs:58: False ⋁ True → True
calc.ℓhs:60: 1 =? 1 → True
calc.ℓhs:61: 2 < 3 → True
calc.ℓhs:62: 2 ≤ 3 → True
calc.ℓhs:63: 4 ≥ 3.99 → True
calc.ℓhs:64: 2 ≠ 3 → True
calc.ℓhs:65: not True → False
calc.ℓhs:68: exp $ (0 :+ 1) · τc → 1.0 :+ 0.0
calc.ℓhs:76: i → 0.0 :+ 1.0
calc.ℓhs:77: π → 3.141592653589793
calc.ℓhs:78: τ → 6.283185307179586
calc.ℓhs:79: ℯ → 2.718281828459045
calc.ℓhs:80: -3 → -3
calc.ℓhs:83: 6 ↥ 3 → 216
calc.ℓhs:84: 3 ↥↥ 2 → 27
calc.ℓhs:85: 3 ↥↥ 3 → 7625597484987
calc.ℓhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.ℓhs:87: 2 ↥ 16 → 65536
calc.ℓhs:88: 2 ↥↥ 4 → 65536
calc.ℓhs:89: 2 ↥↥↥ 3 → 65536
calc.ℓhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.ℓhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.ℓhs:92: 9 ↑ 0.5 → 3.0
calc.ℓhs:95: 1 + (4 * 4) → 17
calc.ℓhs:96: 1 + 4 * 4 → 17
calc.ℓhs:99: 0 → 0
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list_main.ℓhs > list_main.ℓhs
sed -f toascii.sed list.ℓhs > list.ℓhs
ghc -fhpc -o list_main list_main.ℓhs list.lhs --make -fforce-recomp
rm -f $stem_main.tix
./list_main
list.ℓhs:16: []::[String] → []

<no location info>: can't find file: list.lhs
mk: ghc -fhpc -o ...  : exit status=exit(1)
mk: exit 1
sed -f toascii.sed list_test.ℓhs > list_test.ℓhs
ghc -fhpc -o list_test list_test.ℓhs list.lhs --make -fforce-recomp
sed -f toascii.sed calc.ℓhs > calc.ℓhs
rm -f $stem_main.tix
./calc_main
calc.ℓhs:83: 6 ↥ 3 → 216
calc.ℓhs:84: 3 ↥↥ 2 → 27
calc.ℓhs:85: 3 ↥↥ 3 → 7625597484987
calc.ℓhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.ℓhs:87: 2 ↥ 16 → 65536
calc.ℓhs:88: 2 ↥↥ 4 → 65536
calc.ℓhs:89: 2 ↥↥↥ 3 → 65536
calc.ℓhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.ℓhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.ℓhs:92: 9 ↑ 0.5 → 3.0
sh: cannot open --make: No such file
mk: exit 1
mk: ghc -fhpc -o ...  : exit status=exit(2)
sed -f toascii.sed calc_test.ℓhs > calc_test.ℓhs
sed -f toascii.sed constant.ℓhs > constant.ℓhs
sed -f toascii.sed UnicodeOperators.ℓhs > UnicodeOperators.ℓhs
ghc -fhpc -o calc_test $< --make -fforce-recomp -XRankNTypes
sh: Syntax error: newline unexpected
mk: exit 1
mk: ghc -fhpc --make ...  : exit status=exit(2)
sed -f toascii.sed calc_main.ℓhs > calc_main.ℓhs
rm -f $stem_main.tix
./calc_main
calc.ℓhs:83: 6 ↥ 3 → 216
calc.ℓhs:84: 3 ↥↥ 2 → 27
calc.ℓhs:85: 3 ↥↥ 3 → 7625597484987
calc.ℓhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.ℓhs:87: 2 ↥ 16 → 65536
calc.ℓhs:88: 2 ↥↥ 4 → 65536
calc.ℓhs:89: 2 ↥↥↥ 3 → 65536
calc.ℓhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.ℓhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.ℓhs:92: 9 ↑ 0.5 → 3.0
ghc -fhpc --make -fforce-recomp -XRankNTypes -o calc_main $<
sh: Syntax error: newline unexpected
mk: exit 1
mk: ghc -fhpc --make ...  : exit status=exit(2)
ghc -fhpc --make -fforce-recomp -XRankNTypes -o calc_test $<
sh: Syntax error: newline unexpected
mk: ghc -fhpc --make ...  : exit status=exit(2)
mk: exit 1
ghc -fhpc --make -fforce-recomp -XRankNTypes -o calc_main $<
mk(1)
[1 of 4] Compiling UnicodeOperators ( UnicodeOperators.lhs, UnicodeOperators.o )
[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
Linking calc_main ...
in module 'Main'
Hpc failure: module mismatch with .tix/.mix file hash number
(perhaps remove calc_main.tix file?)
mk: exit 1
mk: rm -f $stem_main.tix ./calc_main  : exit status=exit(255)
ghc -fhpc -o calc_main calc_main.lhs calc.lhs constant.lhs UnicodeOperators.lhs --make -fforce-recomp -XRankNTypes
rm -f $stem_main.tix
./calc_main
sed -f toascii.sed calc.ℓhs > calc.lhs
rm -f $stem_main.tix
./calc_main
calc.ℓhs:83: 6 ↥ 3 → 216
calc.ℓhs:84: 3 ↥↥ 2 → 27
calc.ℓhs:85: 3 ↥↥ 3 → 7625597484987
calc.ℓhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.ℓhs:87: 2 ↥ 16 → 65536
calc.ℓhs:88: 2 ↥↥ 4 → 65536
calc.ℓhs:89: 2 ↥↥↥ 3 → 65536
calc.ℓhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.ℓhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.ℓhs:92: 9 ↑ 0.5 → 3.0
[1 of 4] Compiling UnicodeOperators ( UnicodeOperators.lhs, UnicodeOperators.o )
[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
[4 of 4] Compiling Main             ( calc_test.lhs, calc_test.o )
Linking calc_test ...
sed -f toascii.sed calc_test.ℓhs > calc_test.lhs
sed -f toascii.sed constant.ℓhs > constant.lhs
sed -f toascii.sed UnicodeOperators.ℓhs > UnicodeOperators.lhs
ghc -fhpc -o calc_test calc_test.lhs calc.lhs constant.lhs UnicodeOperators.lhs --make -fforce-recomp -XRankNTypes
rm -f $stem_test.tix
./calc_test
calc.ℓhs:35: 2 + 2 → 4
calc.ℓhs:36: (+) 2 2 → 4
calc.ℓhs:37: 31337 × 101 → 3165037
calc.ℓhs:38: 7.0 / 2.0 → 3.5
calc.ℓhs:39: 313 ↥ 15 → 27112218957718876716220410905036741257
calc.ℓhs:40: 2 + (-3) → -1
calc.ℓhs:41: 3 + (-(13 × 37)) → -478
calc.ℓhs:42: 2×3 → 6
calc.ℓhs:43: 2×(-3) → -6
calc.ℓhs:46: 6 + 3 → 9
calc.ℓhs:47: 6 - 3 → 3
calc.ℓhs:48: 6 − 3 → 3
calc.ℓhs:49: 6 * 3 → 18
calc.ℓhs:50: 6 · 3 → 18
calc.ℓhs:51: 6 × 3 → 18
calc.ℓhs:52: 6 / 3 → 2.0
calc.ℓhs:53: 6 ÷ 3 → 2.0
calc.ℓhs:54: 6 ^ 3 → 216
calc.ℓhs:57: True ⋀ False → False
calc.ℓhs:58: False ⋁ True → True
calc.ℓhs:60: 1 =? 1 → True
calc.ℓhs:61: 2 < 3 → True
calc.ℓhs:62: 2 ≤ 3 → True
calc.ℓhs:63: 4 ≥ 3.99 → True
calc.ℓhs:64: 2 ≠ 3 → True
calc.ℓhs:65: not True → False
calc.ℓhs:68: exp $ (0 :+ 1) · τc → 1.0 :+ 0.0
calc.ℓhs:76: i → 0.0 :+ 1.0
calc.ℓhs:77: π → 3.141592653589793
calc.ℓhs:78: τ → 6.283185307179586
calc.ℓhs:79: ℯ → 2.718281828459045
calc.ℓhs:80: -3 → -3
calc.ℓhs:83: 6 ↥ 3 → 216
calc.ℓhs:84: 3 ↥↥ 2 → 27
calc.ℓhs:85: 3 ↥↥ 3 → 7625597484987
calc.ℓhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.ℓhs:87: 2 ↥ 16 → 65536
calc.ℓhs:88: 2 ↥↥ 4 → 65536
calc.ℓhs:89: 2 ↥↥↥ 3 → 65536
calc.ℓhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.ℓhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.ℓhs:92: 9 ↑ 0.5 → 3.0
calc.ℓhs:95: 1 + (4 * 4) → 17
calc.ℓhs:96: 1 + 4 * 4 → 17
calc.ℓhs:99: 0 → 0
sed -f toascii.sed list.ℓhs > list.lhs
rm -f $stem_main.tix
./list_main
list.ℓhs:16: []::[String] → []
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_test.lhs, list_test.o )
Linking list_test ...
sed -f toascii.sed list_test.ℓhs > list_test.lhs
ghc -fhpc -o list_test list_test.lhs list.lhs --make -fforce-recomp
rm -f $stem_test.tix
./list_test
list.ℓhs:16: []::[String] → []

list.lhs:19:40:
     error: macro "showExprLn" passed 3 arguments, but takes just 1
mk: ghc -fhpc -o ...  : exit status=exit(1)
mk: exit 1
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_test list_test.lhs list.lhs --make -fforce-recomp

list.lhs:19:38:
     error: macro "showExprLn" passed 3 arguments, but takes just 1
mk: ghc -fhpc -o ...  : exit status=exit(1)
mk: exit 1
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_test list_test.lhs list.lhs --make -fforce-recomp
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_test.lhs, list_test.o )
Linking list_test ...
Hpc failure: inconsistent number of tick boxes
(perhaps remove list_test.tix file?)
mk: exit 1
mk: rm -f $stem_test.tix ./list_test  : exit status=exit(255)
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_test list_test.lhs list.lhs --make -fforce-recomp
rm -f $stem_test.tix
./list_test
rm -f $stem_test.tix
./list_test
list.ℓhs:16: []::[String] → []
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
sed -f toascii.sed list_main.ℓhs > list_main.lhs
rm -f $stem_main.tix
./list_main
list.ℓhs:16: []::[String] → []
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
sed -f toascii.sed list.ℓhs > list.lhs
rm -f $stem_main.tix
./list_main
list.ℓhs:19: ([1,2,3]) → [1,2,3]
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_test.lhs, list_test.o )
Linking list_test ...
sed -f toascii.sed list_test.ℓhs > list_test.lhs
ghc -fhpc -o list_test list_test.lhs list.lhs --make -fforce-recomp
rm -f $stem_test.tix
./list_test
list.ℓhs:16: []::[String] → []
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list_main.ℓhs > list_main.lhs
rm -f $stem_main.tix
./list_main
list.ℓhs:19: ([1,2,3]) → [1,2,3]
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
in module 'Main'
Hpc failure: module mismatch with .tix/.mix file hash number
(perhaps remove list_main.tix file?)
mk: rm -f $stem_main.tix ./list_main  : exit status=exit(255)
mk: exit 1
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f $stem_main.tix
./list_main
sh: mk: exit 1
./list: not found
mk: rm -f list.tix ./list  : exit status=exit(127)
rm -f list.tix
./list
mk: don't know how to make 'calc_main.run' in /home/jdc/git/rwhaskell/ch1
mk: exit 1
rm -f calc_main.tix
./calc_main
calc.ℓhs:83: 6 ↥ 3 → 216
calc.ℓhs:84: 3 ↥↥ 2 → 27
calc.ℓhs:85: 3 ↥↥ 3 → 7625597484987
calc.ℓhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.ℓhs:87: 2 ↥ 16 → 65536
calc.ℓhs:88: 2 ↥↥ 4 → 65536
calc.ℓhs:89: 2 ↥↥↥ 3 → 65536
calc.ℓhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.ℓhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.ℓhs:92: 9 ↑ 0.5 → 3.0
rm -f calc_test.tix
./calc_test
calc.ℓhs:35: 2 + 2 → 4
calc.ℓhs:36: (+) 2 2 → 4
calc.ℓhs:37: 31337 × 101 → 3165037
calc.ℓhs:38: 7.0 / 2.0 → 3.5
calc.ℓhs:39: 313 ↥ 15 → 27112218957718876716220410905036741257
calc.ℓhs:40: 2 + (-3) → -1
calc.ℓhs:41: 3 + (-(13 × 37)) → -478
calc.ℓhs:42: 2×3 → 6
calc.ℓhs:43: 2×(-3) → -6
calc.ℓhs:46: 6 + 3 → 9
calc.ℓhs:47: 6 - 3 → 3
calc.ℓhs:48: 6 − 3 → 3
calc.ℓhs:49: 6 * 3 → 18
calc.ℓhs:50: 6 · 3 → 18
calc.ℓhs:51: 6 × 3 → 18
calc.ℓhs:52: 6 / 3 → 2.0
calc.ℓhs:53: 6 ÷ 3 → 2.0
calc.ℓhs:54: 6 ^ 3 → 216
calc.ℓhs:57: True ⋀ False → False
calc.ℓhs:58: False ⋁ True → True
calc.ℓhs:60: 1 =? 1 → True
calc.ℓhs:61: 2 < 3 → True
calc.ℓhs:62: 2 ≤ 3 → True
calc.ℓhs:63: 4 ≥ 3.99 → True
calc.ℓhs:64: 2 ≠ 3 → True
calc.ℓhs:65: not True → False
calc.ℓhs:68: exp $ (0 :+ 1) · τc → 1.0 :+ 0.0
calc.ℓhs:76: i → 0.0 :+ 1.0
calc.ℓhs:77: π → 3.141592653589793
calc.ℓhs:78: τ → 6.283185307179586
calc.ℓhs:79: ℯ → 2.718281828459045
calc.ℓhs:80: -3 → -3
calc.ℓhs:83: 6 ↥ 3 → 216
calc.ℓhs:84: 3 ↥↥ 2 → 27
calc.ℓhs:85: 3 ↥↥ 3 → 7625597484987
calc.ℓhs:86: 3 ↥↥↥ 2 → 7625597484987
calc.ℓhs:87: 2 ↥ 16 → 65536
calc.ℓhs:88: 2 ↥↥ 4 → 65536
calc.ℓhs:89: 2 ↥↥↥ 3 → 65536
calc.ℓhs:90: (ℯ ↑ π) − π → 19.99909997918947
calc.ℓhs:91: (ℯ ↑ τ) − τ → 529.2084702175848
calc.ℓhs:92: 9 ↑ 0.5 → 3.0
calc.ℓhs:95: 1 + (4 * 4) → 17
calc.ℓhs:96: 1 + 4 * 4 → 17
calc.ℓhs:99: 0 → 0
rm -f list_main.tix
./list_main
list.ℓhs:22: ([1, 2, 3]) → [1,2,3]
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_test.lhs, list_test.o )
Linking list_test ...
ghc -fhpc -o list_test list_test.lhs list.lhs --make -fforce-recomp
rm -f list_test.tix
./list_test
list.ℓhs:16: []::[String] → []
rm -f list_main.tix
./list_main
list.ℓhs:22: ([1, 2, 3]) → [1,2,3]
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:22: ([1, 2, 3]) → [1,2,3]
list.ℓhs:23: (["foo", "bar", "baz", "quux", "fnord", "xyzzy"]) → ["foo","bar","baz","quux","fnord","xyzzy"]
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_test.lhs, list_test.o )
Linking list_test ...
ghc -fhpc -o list_test list_test.lhs list.lhs --make -fforce-recomp
rm -f list_test.tix
./list_test
list.ℓhs:16: []::[String] → []
rm -f list_main.tix
./list_main
list.ℓhs:22: ([1, 2, 3]) → [1,2,3]
list.ℓhs:23: (["foo", "bar", "baz", "quux", "fnord", "xyzzy"]) → ["foo","bar","baz","quux","fnord","xyzzy"]
[1 of 2] Compiling Shows            ( list.lhs, list.o )

list.lhs:24:123:
    Couldn't match expected type `Bool' against inferred type `[Char]'
    In the expression: "testing"
    In the first argument of `show', namely
        `(([True, False, "testing"]))'
    In the second argument of `(++)', namely
        `show (([True, False, "testing"]))'
mk: ghc -fhpc -o ...  : exit status=exit(1)
mk: exit 1
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp

list.lhs:24:130:  warning: missing terminating ' character
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:22: ([1, 2, 3]) → [1,2,3]
list.ℓhs:23: (["foo", "bar", "baz", "quux", "fnord", "xyzzy"]) → ["foo","bar","baz","quux","fnord","xyzzy"]

list.lhs:28:71:  warning: missing terminating ' character
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:17: ([1..10]) → [1,2,3,4,5,6,7,8,9,10]

list.lhs:29:71:  warning: missing terminating ' character
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_test.lhs, list_test.o )
Linking list_test ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_test list_test.lhs list.lhs --make -fforce-recomp
rm -f list_test.tix
./list_test
list.ℓhs:18: ([1..10]) → [1,2,3,4,5,6,7,8,9,10]
list.ℓhs:21: []::[String] → []
list.ℓhs:27: ([1, 2, 3]) → [1,2,3]
list.ℓhs:28: (["foo", "bar", "baz", "quux", "fnord", "xyzzy"]) → ["foo","bar","baz","quux","fnord","xyzzy"]

list.lhs:30:71:  warning: missing terminating ' character
[1 of 2] Compiling Shows            ( list.lhs, list.o )

list.lhs:19:102:
    No instance for (Enum [Char])
      arising from the arithmetic sequence `"foo" .. "quux"'
                   at list.lhs:19:102-116
    Possible fix: add an instance declaration for (Enum [Char])
    In the first argument of `show', namely `((["foo" .. "quux"]))'
    In the second argument of `(++)', namely
        `show ((["foo" .. "quux"]))'
    In the second argument of `(++)', namely
        `" \8594 " ++ show ((["foo" .. "quux"]))'
mk: ghc -fhpc -o ...  : exit status=exit(1)
mk: exit 1
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_test list_test.lhs list.lhs --make -fforce-recomp

list.lhs:30:71:  warning: missing terminating ' character
[1 of 2] Compiling Shows            ( list.lhs, list.o )

list.lhs:19:102:
    No instance for (Enum [Char])
      arising from the arithmetic sequence `"foo" .. "quux"'
                   at list.lhs:19:102-116
    Possible fix: add an instance declaration for (Enum [Char])
    In the first argument of `show', namely `((["foo" .. "quux"]))'
    In the second argument of `(++)', namely
        `show ((["foo" .. "quux"]))'
    In the second argument of `(++)', namely
        `" \8594 " ++ show ((["foo" .. "quux"]))'
mk: ghc -fhpc -o ...  : exit status=exit(1)
mk: exit 1
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:18: ([1..10]) → [1,2,3,4,5,6,7,8,9,10]
list.ℓhs:20: ([1.0,1.25..2.0]) → [1.0,1.25,1.5,1.75,2.0]
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:18: ([1..10]) → [1,2,3,4,5,6,7,8,9,10]
list.ℓhs:20: ([1.0, 1.25 .. 2.0]) → [1.0,1.25,1.5,1.75,2.0]
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:18: ([1..10]) → [1,2,3,4,5,6,7,8,9,10]
list.ℓhs:20: ([1.0, 1.25 .. 2.0]) → [1.0,1.25,1.5,1.75,2.0]
list.ℓhs:21: ([1, 4 .. 15]) → [1,4,7,10,13]
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:18: ([1..10]) → [1,2,3,4,5,6,7,8,9,10]
list.ℓhs:20: ([1.0, 1.25 .. 2.0]) → [1.0,1.25,1.5,1.75,2.0]
list.ℓhs:21: ([1, 4 .. 15]) → [1,4,7,10,13]
list.ℓhs:22: ([10, 9 .. 1]) → [10,9,8,7,6,5,4,3,2,1]
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:18: ([1..10]) → [1,2,3,4,5,6,7,8,9,10]
list.ℓhs:20: ([1.0, 1.25 .. 2.0]) → [1.0,1.25,1.5,1.75,2.0]
list.ℓhs:21: ([1, 4 .. 15]) → [1,4,7,10,13]
list.ℓhs:22: ([10, 9 .. 1]) → [10,9,8,7,6,5,4,3,2,1]
list.ℓhs:23: ([10 .. 1]) → []
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:18: ([1..10]) → [1,2,3,4,5,6,7,8,9,10]
list.ℓhs:20: ([1.0, 1.25 .. 2.0]) → [1.0,1.25,1.5,1.75,2.0]
list.ℓhs:21: ([1, 4 .. 15]) → [1,4,7,10,13]
list.ℓhs:22: ([10, 9 .. 1]) → [10,9,8,7,6,5,4,3,2,1]
list.ℓhs:23: ([10 .. 1]) → []
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:18: ([1..10]) → [1,2,3,4,5,6,7,8,9,10]
list.ℓhs:20: ([1.0, 1.25 .. 2.0]) → [1.0,1.25,1.5,1.75,2.0]
list.ℓhs:21: ([1, 4 .. 15]) → [1,4,7,10,13]
list.ℓhs:22: ([10, 9 .. 1]) → [10,9,8,7,6,5,4,3,2,1]
list.ℓhs:23: ([10 .. 1]) → []
list.ℓhs:24: ([1.0 .. 1.8]) → [1.0,2.0]
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:18: ([3,1,3] ++ [3,7]) → [3,1,3,3,7]
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:18: ([3,1,3] ++ [3,7]) → [3,1,3,3,7]
list.ℓhs:19: ([] ++ [False,True] ++ [True]) → [False,True,True]
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:23: (1 : [2,3]) → [1,2,3]
list.ℓhs:24: (1 : []) → [1]
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_test.lhs, list_test.o )
Linking list_test ...
ghc -fhpc -o list_test list_test.lhs list.lhs --make -fforce-recomp
rm -f list_test.tix
./list_test
list.ℓhs:19: ([3,1,3] ++ [3,7]) → [3,1,3,3,7]
list.ℓhs:20: ([] ++ [False,True] ++ [True]) → [False,True,True]
list.ℓhs:27: ([1..10]) → [1,2,3,4,5,6,7,8,9,10]
list.ℓhs:29: ([1.0, 1.25 .. 2.0]) → [1.0,1.25,1.5,1.75,2.0]
list.ℓhs:30: ([1, 4 .. 15]) → [1,4,7,10,13]
list.ℓhs:31: ([10, 9 .. 1]) → [10,9,8,7,6,5,4,3,2,1]
list.ℓhs:32: ([10 .. 1]) → []
list.ℓhs:33: ([1.0 .. 1.8]) → [1.0,2.0]
list.ℓhs:36: []::[String] → []
list.ℓhs:42: ([1, 2, 3]) → [1,2,3]
list.ℓhs:43: (["foo", "bar", "baz", "quux", "fnord", "xyzzy"]) → ["foo","bar","baz","quux","fnord","xyzzy"]
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_test.lhs, list_test.o )
Linking list_test ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_test list_test.lhs list.lhs --make -fforce-recomp
rm -f list_test.tix
./list_test
list.ℓhs:20: ([3,1,3] ++ [3,7]) → [3,1,3,3,7]
list.ℓhs:21: ([] ++ [False,True] ++ [True]) → [False,True,True]
list.ℓhs:24: (1 : [2,3]) → [1,2,3]
list.ℓhs:25: (1 : []) → [1]
list.ℓhs:28: ([1..10]) → [1,2,3,4,5,6,7,8,9,10]
list.ℓhs:30: ([1.0, 1.25 .. 2.0]) → [1.0,1.25,1.5,1.75,2.0]
list.ℓhs:31: ([1, 4 .. 15]) → [1,4,7,10,13]
list.ℓhs:32: ([10, 9 .. 1]) → [10,9,8,7,6,5,4,3,2,1]
list.ℓhs:33: ([10 .. 1]) → []
list.ℓhs:34: ([1.0 .. 1.8]) → [1.0,2.0]
list.ℓhs:37: []::[String] → []
list.ℓhs:43: ([1, 2, 3]) → [1,2,3]
list.ℓhs:44: (["foo", "bar", "baz", "quux", "fnord", "xyzzy"]) → ["foo","bar","baz","quux","fnord","xyzzy"]
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:24: (1 : [2,3]) → [1,2,3]
list.ℓhs:25: (1 : []) → [1]
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_test.lhs, list_test.o )
Linking list_test ...
ghc -fhpc -o list_test list_test.lhs list.lhs --make -fforce-recomp
rm -f list_test.tix
./list_test
list.ℓhs:20: ([3,1,3] ++ [3,7]) → [3,1,3,3,7]
list.ℓhs:21: ([] ++ [False,True] ++ [True]) → [False,True,True]
list.ℓhs:24: (1 : [2,3]) → [1,2,3]
list.ℓhs:25: (1 : []) → [1]
list.ℓhs:28: ([1..10]) → [1,2,3,4,5,6,7,8,9,10]
list.ℓhs:30: ([1.0, 1.25 .. 2.0]) → [1.0,1.25,1.5,1.75,2.0]
list.ℓhs:31: ([1, 4 .. 15]) → [1,4,7,10,13]
list.ℓhs:32: ([10, 9 .. 1]) → [10,9,8,7,6,5,4,3,2,1]
list.ℓhs:33: ([10 .. 1]) → []
list.ℓhs:34: ([1.0 .. 1.8]) → [1.0,2.0]
list.ℓhs:37: []::[String] → []
list.ℓhs:43: ([1, 2, 3]) → [1,2,3]
list.ℓhs:44: (["foo", "bar", "baz", "quux", "fnord", "xyzzy"]) → ["foo","bar","baz","quux","fnord","xyzzy"]
[1 of 2] Compiling Shows            ( list.lhs, list.o )

list.lhs:26:100:
    No instance for (Num [[t]])
      arising from the literal `3' at list.lhs:26:100
    Possible fix: add an instance declaration for (Num [[t]])
    In the second argument of `(:)', namely `3'
    In the first argument of `show', namely `(([1, 2] : 3))'
    In the second argument of `(++)', namely `show (([1, 2] : 3))'
mk: ghc -fhpc -o ...  : exit status=exit(1)
mk: exit 1
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_test list_test.lhs list.lhs --make -fforce-recomp
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_test.lhs, list_test.o )
Linking list_test ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_test list_test.lhs list.lhs --make -fforce-recomp
rm -f list_test.tix
./list_test
list.ℓhs:20: ([3,1,3] ++ [3,7]) → [3,1,3,3,7]
list.ℓhs:21: ([] ++ [False,True] ++ [True]) → [False,True,True]
list.ℓhs:24: (1 : [2,3]) → [1,2,3]
list.ℓhs:25: (1 : []) → [1]
list.ℓhs:29: ([1..10]) → [1,2,3,4,5,6,7,8,9,10]
list.ℓhs:31: ([1.0, 1.25 .. 2.0]) → [1.0,1.25,1.5,1.75,2.0]
list.ℓhs:32: ([1, 4 .. 15]) → [1,4,7,10,13]
list.ℓhs:33: ([10, 9 .. 1]) → [10,9,8,7,6,5,4,3,2,1]
list.ℓhs:34: ([10 .. 1]) → []
list.ℓhs:35: ([1.0 .. 1.8]) → [1.0,2.0]
list.ℓhs:38: []::[String] → []
list.ℓhs:44: ([1, 2, 3]) → [1,2,3]
list.ℓhs:45: (["foo", "bar", "baz", "quux", "fnord", "xyzzy"]) → ["foo","bar","baz","quux","fnord","xyzzy"]
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:24: (1 : [2,3]) → [1,2,3]
list.ℓhs:25: (1 : []) → [1]
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:42: "This is a string." → "This is a string."
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:42: "This is a string." → "This is a string."
list.ℓhs:43: '\n' → '\n'
list.ℓhs:44: '\t' → '\t'
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:42: "This is a string." → "This is a string."
list.ℓhs:43: '\n' → '\n'
list.ℓhs:44: '\t' → '\t'
list.ℓhs:45: "\n" → "\n"
list.ℓhs:46: "\t" → "\t"
list.ℓhs:47: "\\n" → "\\n"
list.ℓhs:48: "\\t" → "\\t"
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:42: "This is a string." → "This is a string."
list.ℓhs:43: '\n' → '\n'
list.ℓhs:44: '\t' → '\t'
list.ℓhs:45: "a\nb" → "a\nb"
list.ℓhs:46: "\t" → "\t"
list.ℓhs:47: "\\n" → "\\n"
list.ℓhs:48: "\\t" → "\\t"
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:42: "This is a string." → "This is a string."
list.ℓhs:43: '\n' → '\n'
list.ℓhs:44: '\t' → '\t'
list.ℓhs:45: "a\nb" → "a\nb"
a
b
list.ℓhs:47: "\t" → "\t"
list.ℓhs:48: "\\n" → "\\n"
list.ℓhs:49: "\\t" → "\\t"
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:42: "This is a string." → "This is a string."
list.ℓhs:43: '\n' → '\n'
list.ℓhs:44: '\t' → '\t'
list.ℓhs:45: "a\nb" → "a\nb"
a
b
list.ℓhs:47: "\t" → "\t"
list.ℓhs:48: "\\n" → "\\n"
list.ℓhs:49: "\\t" → "\\t"
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:42: "This is a string." → "This is a string."
list.ℓhs:43: '\n' → '\n'
list.ℓhs:44: '\t' → '\t'
list.ℓhs:45: "a\nb" → "a\nb"
a
	b
list.ℓhs:47: "\t" → "\t"
list.ℓhs:48: "\\n" → "\\n"
list.ℓhs:49: "\\t" → "\\t"
[1 of 2] Compiling Shows            ( list.lhs, list.o )

list.lhs:47:17:
    Couldn't match expected type `[Char]' against inferred type `Char'
      Expected type: String
      Inferred type: Char
    In the first argument of `putStrLn', namely 'a'
    In a stmt of a 'do' expression: putStrLn 'a'
mk: ghc -fhpc -o ...  : exit status=exit(1)
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
mk: exit 1
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:42: "This is a string." → "This is a string."
list.ℓhs:43: '\n' → '\n'
list.ℓhs:44: '\t' → '\t'
list.ℓhs:45: "a\nb" → "a\nb"
a
	b
a
list.ℓhs:48: "\t" → "\t"
list.ℓhs:49: "\\n" → "\\n"
list.ℓhs:50: "\\t" → "\\t"
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:42: "This is a string." → "This is a string."
list.ℓhs:43: '\n' → '\n'
list.ℓhs:44: '\t' → '\t'
list.ℓhs:45: "a\n\tb" → "a\n\tb"
a
	b
list.ℓhs:47: ['a'] → "a"
a
list.ℓhs:49: "\t" → "\t"
list.ℓhs:50: "\\n" → "\\n"
list.ℓhs:51: "\\t" → "\\t"
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:42: "This is a string." → "This is a string."
list.ℓhs:43: '\n' → '\n'
list.ℓhs:44: '\t' → '\t'
list.ℓhs:45: "a\n\tb" → "a\n\tb"
a
	b
list.ℓhs:47: ['a'] → "a"
a
list.ℓhs:49: "\tb" → "\tb"
	b
list.ℓhs:51: "\\n" → "\\n"
list.ℓhs:52: "\\tb" → "\\tb"
\tb
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_main.lhs, list_main.o )
Linking list_main ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_main list_main.lhs list.lhs --make -fforce-recomp
rm -f list_main.tix
./list_main
list.ℓhs:44: "This is a string." → "This is a string."
list.ℓhs:45: '\n' → '\n'
list.ℓhs:46: '\t' → '\t'
list.ℓhs:47: "a\n\tb" → "a\n\tb"
a
	b
list.ℓhs:49: ['a'] → "a"
a
list.ℓhs:51: "\tb" → "\tb"
	b
list.ℓhs:53: "\\n" → "\\n"
list.ℓhs:54: "\\tb" → "\\tb"
\tb
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_test.lhs, list_test.o )
Linking list_test ...
ghc -fhpc -o list_test list_test.lhs list.lhs --make -fforce-recomp
rm -f list_test.tix
./list_test
list.ℓhs:21: ([3,1,3] ++ [3,7]) → [3,1,3,3,7]
list.ℓhs:22: ([] ++ [False,True] ++ [True]) → [False,True,True]
list.ℓhs:25: (1 : [2,3]) → [1,2,3]
list.ℓhs:26: (1 : []) → [1]
list.ℓhs:30: ([1..10]) → [1,2,3,4,5,6,7,8,9,10]
list.ℓhs:32: ([1.0, 1.25 .. 2.0]) → [1.0,1.25,1.5,1.75,2.0]
list.ℓhs:33: ([1, 4 .. 15]) → [1,4,7,10,13]
list.ℓhs:34: ([10, 9 .. 1]) → [10,9,8,7,6,5,4,3,2,1]
list.ℓhs:35: ([10 .. 1]) → []
list.ℓhs:36: ([1.0 .. 1.8]) → [1.0,2.0]
list.ℓhs:39: []::[String] → []
list.ℓhs:40: "" → ""

list.ℓhs:44: "This is a string." → "This is a string."
list.ℓhs:45: '\n' → '\n'
list.ℓhs:46: '\t' → '\t'
list.ℓhs:47: "a\n\tb" → "a\n\tb"
a
	b
list.ℓhs:49: ['a'] → "a"
a
list.ℓhs:51: "\tb" → "\tb"
	b
list.ℓhs:53: "\\n" → "\\n"
list.ℓhs:54: "\\tb" → "\\tb"
\tb
list.ℓhs:61: ([1, 2, 3]) → [1,2,3]
list.ℓhs:62: (["foo", "bar", "baz", "quux", "fnord", "xyzzy"]) → ["foo","bar","baz","quux","fnord","xyzzy"]
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_test.lhs, list_test.o )
Linking list_test ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_test list_test.lhs list.lhs --make -fforce-recomp
rm -f list_test.tix
./list_test
list.ℓhs:21: ([3,1,3] ++ [3,7]) → [3,1,3,3,7]
list.ℓhs:22: ([] ++ [False,True] ++ [True]) → [False,True,True]
list.ℓhs:23: ("foo" ++ "bar") → "foobar"
list.ℓhs:26: (1 : [2,3]) → [1,2,3]
list.ℓhs:27: (1 : []) → [1]
list.ℓhs:29: ('a' : "bc") → "abc"
list.ℓhs:32: ([1..10]) → [1,2,3,4,5,6,7,8,9,10]
list.ℓhs:34: ([1.0, 1.25 .. 2.0]) → [1.0,1.25,1.5,1.75,2.0]
list.ℓhs:35: ([1, 4 .. 15]) → [1,4,7,10,13]
list.ℓhs:36: ([10, 9 .. 1]) → [10,9,8,7,6,5,4,3,2,1]
list.ℓhs:37: ([10 .. 1]) → []
list.ℓhs:38: ([1.0 .. 1.8]) → [1.0,2.0]
list.ℓhs:41: []::[String] → []
list.ℓhs:42: "" → ""

list.ℓhs:46: "This is a string." → "This is a string."
list.ℓhs:47: '\n' → '\n'
list.ℓhs:48: '\t' → '\t'
list.ℓhs:49: "a\n\tb" → "a\n\tb"
a
	b
list.ℓhs:51: ['a'] → "a"
a
list.ℓhs:53: "\tb" → "\tb"
	b
list.ℓhs:55: "\\n" → "\\n"
list.ℓhs:56: "\\tb" → "\\tb"
\tb
list.ℓhs:63: ([1, 2, 3]) → [1,2,3]
list.ℓhs:64: (["foo", "bar", "baz", "quux", "fnord", "xyzzy"]) → ["foo","bar","baz","quux","fnord","xyzzy"]
[1 of 2] Compiling Shows            ( list.lhs, list.o )
[2 of 2] Compiling Main             ( list_test.lhs, list_test.o )
Linking list_test ...
sed -f toascii.sed list.ℓhs > list.lhs
ghc -fhpc -o list_test list_test.lhs list.lhs --make -fforce-recomp
rm -f list_test.tix
./list_test
list.ℓhs:21: ([3,1,3] ++ [3,7]) → [3,1,3,3,7]
list.ℓhs:22: ([] ++ [False,True] ++ [True]) → [False,True,True]
list.ℓhs:23: ("foo" ++ "bar") → "foobar"
list.ℓhs:26: (1 : [2,3]) → [1,2,3]
list.ℓhs:27: (1 : []) → [1]
list.ℓhs:29: ('a' : "bc") → "abc"
list.ℓhs:32: ([1..10]) → [1,2,3,4,5,6,7,8,9,10]
list.ℓhs:34: ([1.0, 1.25 .. 2.0]) → [1.0,1.25,1.5,1.75,2.0]
list.ℓhs:35: ([1, 4 .. 15]) → [1,4,7,10,13]
list.ℓhs:36: ([10, 9 .. 1]) → [10,9,8,7,6,5,4,3,2,1]
list.ℓhs:37: ([10 .. 1]) → []
list.ℓhs:38: ([1.0 .. 1.8]) → [1.0,2.0]
list.ℓhs:41: []::[String] → []
list.ℓhs:42: []::[[Char]] → []
list.ℓhs:43: "" → ""

list.ℓhs:47: "This is a string." → "This is a string."
list.ℓhs:48: '\n' → '\n'
list.ℓhs:49: '\t' → '\t'
list.ℓhs:50: "a\n\tb" → "a\n\tb"
a
	b
list.ℓhs:52: ['a'] → "a"
a
list.ℓhs:54: "\tb" → "\tb"
	b
list.ℓhs:56: "\\n" → "\\n"
list.ℓhs:57: "\\tb" → "\\tb"
\tb
list.ℓhs:64: ([1, 2, 3]) → [1,2,3]
list.ℓhs:65: (["foo", "bar", "baz", "quux", "fnord", "xyzzy"]) → ["foo","bar","baz","quux","fnord","xyzzy"]
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> Prelude> data [] a = [] | a : [a] 	-- Defined in GHC.Types
instance (Eq a) => Eq [a] -- Defined in GHC.Base
instance Monad [] -- Defined in GHC.Base
instance Functor [] -- Defined in GHC.Base
instance (Ord a) => Ord [a] -- Defined in GHC.Base
instance (Read a) => Read [a] -- Defined in GHC.Read
instance (Show a) => Show [a] -- Defined in GHC.Show

<interactive>:1:0: parse error on input `::'
Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> Prelude> 
<interactive>:1:2: parse error on input `::'
Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> Prelude> data [] a = [] | a : [a] 	-- Defined in GHC.Types
instance (Eq a) => Eq [a] -- Defined in GHC.Base
instance Monad [] -- Defined in GHC.Base
instance Functor [] -- Defined in GHC.Base
instance (Ord a) => Ord [a] -- Defined in GHC.Base
instance (Read a) => Read [a] -- Defined in GHC.Read
instance (Show a) => Show [a] -- Defined in GHC.Show
Prelude> Leaving GHCi.
[1 of 4] Compiling UnicodeOperators ( UnicodeOperators.lhs, UnicodeOperators.o )
[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
Linking calc_main ...
sed -f toascii.sed calc.ℓhs > calc.lhs
ghc -fhpc -o calc_main calc_main.lhs calc.lhs constant.lhs UnicodeOperators.lhs --make -fforce-recomp -XRankNTypes
rm -f calc_main.tix
./calc_main
calc.ℓhs:46: 6 + 3 → 9
calc.ℓhs:47: 6 - 3 → 3
calc.ℓhs:48: 6 − 3 → 3
calc.ℓhs:49: 6 * 3 → 18
calc.ℓhs:50: 6 · 3 → 18
calc.ℓhs:51: 6 × 3 → 18
calc.ℓhs:52: 6 / 3 → 2.0
calc.ℓhs:53: 6 ÷ 3 → 2.0
calc.ℓhs:54: 6 ^ 3 → 216
calc.ℓhs:55: 7 ↥ 80 → 40536215597144386832065866109016673800875222251012083746192454448001
[1 of 4] Compiling UnicodeOperators ( UnicodeOperators.lhs, UnicodeOperators.o )
[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
[3 of 4] Compiling Shows            ( calc.lhs, calc.o )

calc.lhs:101:91: Not in scope: `%'
mk: ghc -fhpc -o ...  : exit status=exit(1)
mk: exit 1
sed -f toascii.sed calc.ℓhs > calc.lhs
ghc -fhpc -o calc_main calc_main.lhs calc.lhs constant.lhs UnicodeOperators.lhs --make -fforce-recomp -XRankNTypes
[1 of 4] Compiling UnicodeOperators ( UnicodeOperators.lhs, UnicodeOperators.o )
[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
Linking calc_main ...
sed -f toascii.sed calc.ℓhs > calc.lhs
ghc -fhpc -o calc_main calc_main.lhs calc.lhs constant.lhs UnicodeOperators.lhs --make -fforce-recomp -XRankNTypes
rm -f calc_main.tix
./calc_main
calc.ℓhs:102: 11 % 29 → 11 % 29
[1 of 4] Compiling UnicodeOperators ( UnicodeOperators.lhs, UnicodeOperators.o )
[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
[3 of 4] Compiling Shows            ( calc.lhs, calc.o )

calc.lhs:103:83:
    Ambiguous type variable `t' in the constraints:
      `Integral t' arising from a use of `show' at calc.lhs:103:83-97
      `Fractional t'
        arising from the literal `3.14' at calc.lhs:103:89-92
    Probable fix: add a type signature that fixes these type variable(s)

calc.lhs:104:84:
    Ambiguous type variable `t1' in the constraints:
      `Integral t1' arising from a use of `show' at calc.lhs:104:84-99
      `Fractional t1'
        arising from the literal `1.2' at calc.lhs:104:90-92
    Probable fix: add a type signature that fixes these type variable(s)
mk: exit 1
mk: ghc -fhpc -o ...  : exit status=exit(1)
sed -f toascii.sed calc.ℓhs > calc.lhs
ghc -fhpc -o calc_main calc_main.lhs calc.lhs constant.lhs UnicodeOperators.lhs --make -fforce-recomp -XRankNTypes
[1 of 4] Compiling UnicodeOperators ( UnicodeOperators.lhs, UnicodeOperators.o )
[2 of 4] Compiling Constant         ( constant.lhs, constant.o )
[3 of 4] Compiling Shows            ( calc.lhs, calc.o )
[4 of 4] Compiling Main             ( calc_main.lhs, calc_main.o )
Linking calc_main ...
sed -f toascii.sed calc.ℓhs > calc.lhs
ghc -fhpc -o calc_main calc_main.lhs calc.lhs constant.lhs UnicodeOperators.lhs --make -fforce-recomp -XRankNTypes
rm -f calc_main.tix
./calc_main
calc.ℓhs:102: 11 % 29 → 11 % 29
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> data [] a = [] | a : [a] 	-- Defined in GHC.Types
instance (Eq a) => Eq [a] -- Defined in GHC.Base
instance Monad [] -- Defined in GHC.Base
instance Functor [] -- Defined in GHC.Base
instance (Ord a) => Ord [a] -- Defined in GHC.Base
instance (Read a) => Read [a] -- Defined in GHC.Read
instance (Show a) => Show [a] -- Defined in GHC.Show
Prelude> Leaving GHCi.
mk: don't know how to make 'wc' in /home/jdc/git/rwhaskell/ch1
      7      14     122
mk: don't know how to make 'wc' in /home/jdc/git/rwhaskell/ch1
./wc: No such file or directory
mk: exit 1
31113: signal: sys: write on closed pipe
ghc -o  .lhs 2>&1
ghc: no input files
Usage: For basic information, try the `--help' option.
mk: ghc -o  ...  : exit status=exit(1)
./wc: No such file or directory
mk: exit 1
31148: signal: sys: write on closed pipe
ghc -o wc wc.lhs 2>&1
7
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> Prelude> 13
it :: Integer
Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> Prelude> 13
it :: Integer
Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> Prelude> 13
it :: Integer
Prelude> 23
it :: Integer
Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> 
<no location info>:
    Could not find module `UnicodeOperators':
      it is not a module in the current program, or in any known package.
Prelude> Prelude> 13
it :: Integer
Prelude> 23
it :: Integer
Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> Prelude> 13
it :: Integer
Prelude> 23
it :: Integer
Prelude> 6
it :: Integer
Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> Prelude> 13
it :: Integer
Prelude> 23
it :: Integer
Prelude> 6
it :: Integer
Prelude> 6
it :: Integer
Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> Prelude> 13
it :: Integer
Prelude> 23
it :: Integer
Prelude> 6
it :: Integer
Prelude> 6
it :: Integer
Prelude> 4.0
it :: Double
Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> Prelude> 13
it :: Integer
Prelude> 23
it :: Integer
Prelude> 6
it :: Integer
Prelude> 6
it :: Integer
Prelude> 4.0
it :: Double
Prelude> 7
it :: Integer
Prelude> 8
it :: Integer
Prelude> 8
it :: Integer
Prelude> 7
it :: Integer
Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> Prelude> 13
it :: Integer
Prelude> 23
it :: Integer
Prelude> 6
it :: Integer
Prelude> 6
it :: Integer
Prelude> 4.0
it :: Double
Prelude> 7
it :: Integer
Prelude> 8
it :: Integer
Prelude> 8
it :: Integer
Prelude> 7
it :: Integer
Prelude> 1.0
it :: Double
Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> Prelude> 13
it :: Integer
Prelude> 23
it :: Integer
Prelude> 6
it :: Integer
Prelude> 6
it :: Integer
Prelude> 4.0
it :: Double
Prelude> 7
it :: Integer
Prelude> 8
it :: Integer
Prelude> 8
it :: Integer
Prelude> 7
it :: Integer
Prelude> 1.0
it :: Double
Prelude> 4
it :: Integer
Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> Prelude> 13
it :: Integer
Prelude> 23
it :: Integer
Prelude> 6
it :: Integer
Prelude> 6
it :: Integer
Prelude> 4.0
it :: Double
Prelude> 7
it :: Integer
Prelude> 8
it :: Integer
Prelude> 8
it :: Integer
Prelude> 7
it :: Integer
Prelude> 1.0
it :: Double
Prelude> 4
it :: Integer
Prelude> 3
it :: Integer
Prelude> 3
it :: Integer
Prelude> 4
it :: Integer
Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude>  Commands available from the prompt:

   <statement>                 evaluate/run <statement>
   :                           repeat last command
   :{\n ..lines.. \n:}\n       multiline command
   :add [*]<module> ...        add module(s) to the current target set
   :browse[!] [[*]<mod>]       display the names defined by module <mod>
                               (!: more details; *: all top-level names)
   :cd <dir>                   change directory to <dir>
   :cmd <expr>                 run the commands returned by <expr>::IO String
   :ctags[!] [<file>]          create tags file for Vi (default: "tags")
                               (!: use regex instead of line number)
   :def <cmd> <expr>           define a command :<cmd>
   :edit <file>                edit file
   :edit                       edit last module
   :etags [<file>]             create tags file for Emacs (default: "TAGS")
   :help, :?                   display this list of commands
   :info [<name> ...]          display information about the given names
   :kind <type>                show the kind of <type>
   :load [*]<module> ...       load module(s) and their dependents
   :main [<arguments> ...]     run the main function with the given arguments
   :module [+/-] [*]<mod> ...  set the context for expression evaluation
   :quit                       exit GHCi
   :reload                     reload the current module set
   :run function [<arguments> ...] run the function with the given arguments
   :type <expr>                show the type of <expr>
   :undef <cmd>                undefine user-defined command :<cmd>
   :!<command>                 run the shell command <command>

 -- Commands for debugging:

   :abandon                    at a breakpoint, abandon current computation
   :back                       go back in the history (after :trace)
   :break [<mod>] <l> [<col>]  set a breakpoint at the specified location
   :break <name>               set a breakpoint on the specified function
   :continue                   resume after a breakpoint
   :delete <number>            delete the specified breakpoint
   :delete *                   delete all breakpoints
   :force <expr>               print <expr>, forcing unevaluated parts
   :forward                    go forward in the history (after :back)
   :history [<n>]              after :trace, show the execution history
   :list                       show the source code around current breakpoint
   :list identifier            show the source code for <identifier>
   :list [<module>] <line>     show the source code around line number <line>
   :print [<name> ...]         prints a value without forcing its computation
   :sprint [<name> ...]        simplifed version of :print
   :step                       single-step after stopping at a breakpoint
   :step <expr>                single-step into <expr>
   :steplocal                  single-step within the current top-level binding
   :stepmodule                 single-step restricted to the current module
   :trace                      trace after stopping at a breakpoint
   :trace <expr>               evaluate <expr> with tracing on (see :history)

 -- Commands for changing settings:

   :set <option> ...           set options
   :set args <arg> ...         set the arguments returned by System.getArgs
   :set prog <progname>        set the value returned by System.getProgName
   :set prompt <prompt>        set the prompt used in GHCi
   :set editor <cmd>           set the command used for :edit
   :set stop [<n>] <cmd>       set the command to run when a breakpoint is hit
   :unset <option> ...         unset options

  Options for ':set' and ':unset':

    +r            revert top-level expressions after each evaluation
    +s            print timing/memory stats after each evaluation
    +t            print type after evaluation
    -<flags>      most GHC command line flags can also be set here
                         (eg. -v2, -fglasgow-exts, etc.)
                    for GHCi-specific flags, see User's Guide,
                    Flag reference, Interactive-mode options

 -- Commands for displaying information:

   :show bindings              show the current bindings made at the prompt
   :show breaks                show the active breakpoints
   :show context               show the breakpoint context
   :show modules               show the currently loaded modules
   :show packages              show the currently active package flags
   :show languages             show the currently active language flags
   :show <setting>             show value of <setting>, which is one of
                                  [args, prog, prompt, editor, stop]

Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude>  Commands available from the prompt:

   <statement>                 evaluate/run <statement>
   :                           repeat last command
   :{\n ..lines.. \n:}\n       multiline command
   :add [*]<module> ...        add module(s) to the current target set
   :browse[!] [[*]<mod>]       display the names defined by module <mod>
                               (!: more details; *: all top-level names)
   :cd <dir>                   change directory to <dir>
   :cmd <expr>                 run the commands returned by <expr>::IO String
   :ctags[!] [<file>]          create tags file for Vi (default: "tags")
                               (!: use regex instead of line number)
   :def <cmd> <expr>           define a command :<cmd>
   :edit <file>                edit file
   :edit                       edit last module
   :etags [<file>]             create tags file for Emacs (default: "TAGS")
   :help, :?                   display this list of commands
   :info [<name> ...]          display information about the given names
   :kind <type>                show the kind of <type>
   :load [*]<module> ...       load module(s) and their dependents
   :main [<arguments> ...]     run the main function with the given arguments
   :module [+/-] [*]<mod> ...  set the context for expression evaluation
   :quit                       exit GHCi
   :reload                     reload the current module set
   :run function [<arguments> ...] run the function with the given arguments
   :type <expr>                show the type of <expr>
   :undef <cmd>                undefine user-defined command :<cmd>
   :!<command>                 run the shell command <command>

 -- Commands for debugging:

   :abandon                    at a breakpoint, abandon current computation
   :back                       go back in the history (after :trace)
   :break [<mod>] <l> [<col>]  set a breakpoint at the specified location
   :break <name>               set a breakpoint on the specified function
   :continue                   resume after a breakpoint
   :delete <number>            delete the specified breakpoint
   :delete *                   delete all breakpoints
   :force <expr>               print <expr>, forcing unevaluated parts
   :forward                    go forward in the history (after :back)
   :history [<n>]              after :trace, show the execution history
   :list                       show the source code around current breakpoint
   :list identifier            show the source code for <identifier>
   :list [<module>] <line>     show the source code around line number <line>
   :print [<name> ...]         prints a value without forcing its computation
   :sprint [<name> ...]        simplifed version of :print
   :step                       single-step after stopping at a breakpoint
   :step <expr>                single-step into <expr>
   :steplocal                  single-step within the current top-level binding
   :stepmodule                 single-step restricted to the current module
   :trace                      trace after stopping at a breakpoint
   :trace <expr>               evaluate <expr> with tracing on (see :history)

 -- Commands for changing settings:

   :set <option> ...           set options
   :set args <arg> ...         set the arguments returned by System.getArgs
   :set prog <progname>        set the value returned by System.getProgName
   :set prompt <prompt>        set the prompt used in GHCi
   :set editor <cmd>           set the command used for :edit
   :set stop [<n>] <cmd>       set the command to run when a breakpoint is hit
   :unset <option> ...         unset options

  Options for ':set' and ':unset':

    +r            revert top-level expressions after each evaluation
    +s            print timing/memory stats after each evaluation
    +t            print type after evaluation
    -<flags>      most GHC command line flags can also be set here
                         (eg. -v2, -fglasgow-exts, etc.)
                    for GHCi-specific flags, see User's Guide,
                    Flag reference, Interactive-mode options

 -- Commands for displaying information:

   :show bindings              show the current bindings made at the prompt
   :show breaks                show the active breakpoints
   :show context               show the breakpoint context
   :show modules               show the currently loaded modules
   :show packages              show the currently active package flags
   :show languages             show the currently active language flags
   :show <setting>             show value of <setting>, which is one of
                                  [args, prog, prompt, editor, stop]

Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude>  Commands available from the prompt:

   <statement>                 evaluate/run <statement>
   :                           repeat last command
   :{\n ..lines.. \n:}\n       multiline command
   :add [*]<module> ...        add module(s) to the current target set
   :browse[!] [[*]<mod>]       display the names defined by module <mod>
                               (!: more details; *: all top-level names)
   :cd <dir>                   change directory to <dir>
   :cmd <expr>                 run the commands returned by <expr>::IO String
   :ctags[!] [<file>]          create tags file for Vi (default: "tags")
                               (!: use regex instead of line number)
   :def <cmd> <expr>           define a command :<cmd>
   :edit <file>                edit file
   :edit                       edit last module
   :etags [<file>]             create tags file for Emacs (default: "TAGS")
   :help, :?                   display this list of commands
   :info [<name> ...]          display information about the given names
   :kind <type>                show the kind of <type>
   :load [*]<module> ...       load module(s) and their dependents
   :main [<arguments> ...]     run the main function with the given arguments
   :module [+/-] [*]<mod> ...  set the context for expression evaluation
   :quit                       exit GHCi
   :reload                     reload the current module set
   :run function [<arguments> ...] run the function with the given arguments
   :type <expr>                show the type of <expr>
   :undef <cmd>                undefine user-defined command :<cmd>
   :!<command>                 run the shell command <command>

 -- Commands for debugging:

   :abandon                    at a breakpoint, abandon current computation
   :back                       go back in the history (after :trace)
   :break [<mod>] <l> [<col>]  set a breakpoint at the specified location
   :break <name>               set a breakpoint on the specified function
   :continue                   resume after a breakpoint
   :delete <number>            delete the specified breakpoint
   :delete *                   delete all breakpoints
   :force <expr>               print <expr>, forcing unevaluated parts
   :forward                    go forward in the history (after :back)
   :history [<n>]              after :trace, show the execution history
   :list                       show the source code around current breakpoint
   :list identifier            show the source code for <identifier>
   :list [<module>] <line>     show the source code around line number <line>
   :print [<name> ...]         prints a value without forcing its computation
   :sprint [<name> ...]        simplifed version of :print
   :step                       single-step after stopping at a breakpoint
   :step <expr>                single-step into <expr>
   :steplocal                  single-step within the current top-level binding
   :stepmodule                 single-step restricted to the current module
   :trace                      trace after stopping at a breakpoint
   :trace <expr>               evaluate <expr> with tracing on (see :history)

 -- Commands for changing settings:

   :set <option> ...           set options
   :set args <arg> ...         set the arguments returned by System.getArgs
   :set prog <progname>        set the value returned by System.getProgName
   :set prompt <prompt>        set the prompt used in GHCi
   :set editor <cmd>           set the command used for :edit
   :set stop [<n>] <cmd>       set the command to run when a breakpoint is hit
   :unset <option> ...         unset options

  Options for ':set' and ':unset':

    +r            revert top-level expressions after each evaluation
    +s            print timing/memory stats after each evaluation
    +t            print type after evaluation
    -<flags>      most GHC command line flags can also be set here
                         (eg. -v2, -fglasgow-exts, etc.)
                    for GHCi-specific flags, see User's Guide,
                    Flag reference, Interactive-mode options

 -- Commands for displaying information:

   :show bindings              show the current bindings made at the prompt
   :show breaks                show the active breakpoints
   :show context               show the breakpoint context
   :show modules               show the currently loaded modules
   :show packages              show the currently active package flags
   :show languages             show the currently active language flags
   :show <setting>             show value of <setting>, which is one of
                                  [args, prog, prompt, editor, stop]

Prelude> Prelude> x :: Integer = _
Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude>  Commands available from the prompt:

   <statement>                 evaluate/run <statement>
   :                           repeat last command
   :{\n ..lines.. \n:}\n       multiline command
   :add [*]<module> ...        add module(s) to the current target set
   :browse[!] [[*]<mod>]       display the names defined by module <mod>
                               (!: more details; *: all top-level names)
   :cd <dir>                   change directory to <dir>
   :cmd <expr>                 run the commands returned by <expr>::IO String
   :ctags[!] [<file>]          create tags file for Vi (default: "tags")
                               (!: use regex instead of line number)
   :def <cmd> <expr>           define a command :<cmd>
   :edit <file>                edit file
   :edit                       edit last module
   :etags [<file>]             create tags file for Emacs (default: "TAGS")
   :help, :?                   display this list of commands
   :info [<name> ...]          display information about the given names
   :kind <type>                show the kind of <type>
   :load [*]<module> ...       load module(s) and their dependents
   :main [<arguments> ...]     run the main function with the given arguments
   :module [+/-] [*]<mod> ...  set the context for expression evaluation
   :quit                       exit GHCi
   :reload                     reload the current module set
   :run function [<arguments> ...] run the function with the given arguments
   :type <expr>                show the type of <expr>
   :undef <cmd>                undefine user-defined command :<cmd>
   :!<command>                 run the shell command <command>

 -- Commands for debugging:

   :abandon                    at a breakpoint, abandon current computation
   :back                       go back in the history (after :trace)
   :break [<mod>] <l> [<col>]  set a breakpoint at the specified location
   :break <name>               set a breakpoint on the specified function
   :continue                   resume after a breakpoint
   :delete <number>            delete the specified breakpoint
   :delete *                   delete all breakpoints
   :force <expr>               print <expr>, forcing unevaluated parts
   :forward                    go forward in the history (after :back)
   :history [<n>]              after :trace, show the execution history
   :list                       show the source code around current breakpoint
   :list identifier            show the source code for <identifier>
   :list [<module>] <line>     show the source code around line number <line>
   :print [<name> ...]         prints a value without forcing its computation
   :sprint [<name> ...]        simplifed version of :print
   :step                       single-step after stopping at a breakpoint
   :step <expr>                single-step into <expr>
   :steplocal                  single-step within the current top-level binding
   :stepmodule                 single-step restricted to the current module
   :trace                      trace after stopping at a breakpoint
   :trace <expr>               evaluate <expr> with tracing on (see :history)

 -- Commands for changing settings:

   :set <option> ...           set options
   :set args <arg> ...         set the arguments returned by System.getArgs
   :set prog <progname>        set the value returned by System.getProgName
   :set prompt <prompt>        set the prompt used in GHCi
   :set editor <cmd>           set the command used for :edit
   :set stop [<n>] <cmd>       set the command to run when a breakpoint is hit
   :unset <option> ...         unset options

  Options for ':set' and ':unset':

    +r            revert top-level expressions after each evaluation
    +s            print timing/memory stats after each evaluation
    +t            print type after evaluation
    -<flags>      most GHC command line flags can also be set here
                         (eg. -v2, -fglasgow-exts, etc.)
                    for GHCi-specific flags, see User's Guide,
                    Flag reference, Interactive-mode options

 -- Commands for displaying information:

   :show bindings              show the current bindings made at the prompt
   :show breaks                show the active breakpoints
   :show context               show the breakpoint context
   :show modules               show the currently loaded modules
   :show packages              show the currently active package flags
   :show languages             show the currently active language flags
   :show <setting>             show value of <setting>, which is one of
                                  [args, prog, prompt, editor, stop]

Prelude> Prelude> syntax:  :show [ args | prog | prompt | editor | stop | modules | bindings
               | breaks | context | packages | languages ]
Prelude> Leaving GHCi.
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude>  Commands available from the prompt:

   <statement>                 evaluate/run <statement>
   :                           repeat last command
   :{\n ..lines.. \n:}\n       multiline command
   :add [*]<module> ...        add module(s) to the current target set
   :browse[!] [[*]<mod>]       display the names defined by module <mod>
                               (!: more details; *: all top-level names)
   :cd <dir>                   change directory to <dir>
   :cmd <expr>                 run the commands returned by <expr>::IO String
   :ctags[!] [<file>]          create tags file for Vi (default: "tags")
                               (!: use regex instead of line number)
   :def <cmd> <expr>           define a command :<cmd>
   :edit <file>                edit file
   :edit                       edit last module
   :etags [<file>]             create tags file for Emacs (default: "TAGS")
   :help, :?                   display this list of commands
   :info [<name> ...]          display information about the given names
   :kind <type>                show the kind of <type>
   :load [*]<module> ...       load module(s) and their dependents
   :main [<arguments> ...]     run the main function with the given arguments
   :module [+/-] [*]<mod> ...  set the context for expression evaluation
   :quit                       exit GHCi
   :reload                     reload the current module set
   :run function [<arguments> ...] run the function with the given arguments
   :type <expr>                show the type of <expr>
   :undef <cmd>                undefine user-defined command :<cmd>
   :!<command>                 run the shell command <command>

 -- Commands for debugging:

   :abandon                    at a breakpoint, abandon current computation
   :back                       go back in the history (after :trace)
   :break [<mod>] <l> [<col>]  set a breakpoint at the specified location
   :break <name>               set a breakpoint on the specified function
   :continue                   resume after a breakpoint
   :delete <number>            delete the specified breakpoint
   :delete *                   delete all breakpoints
   :force <expr>               print <expr>, forcing unevaluated parts
   :forward                    go forward in the history (after :back)
   :history [<n>]              after :trace, show the execution history
   :list                       show the source code around current breakpoint
   :list identifier            show the source code for <identifier>
   :list [<module>] <line>     show the source code around line number <line>
   :print [<name> ...]         prints a value without forcing its computation
   :sprint [<name> ...]        simplifed version of :print
   :step                       single-step after stopping at a breakpoint
   :step <expr>                single-step into <expr>
   :steplocal                  single-step within the current top-level binding
   :stepmodule                 single-step restricted to the current module
   :trace                      trace after stopping at a breakpoint
   :trace <expr>               evaluate <expr> with tracing on (see :history)

 -- Commands for changing settings:

   :set <option> ...           set options
   :set args <arg> ...         set the arguments returned by System.getArgs
   :set prog <progname>        set the value returned by System.getProgName
   :set prompt <prompt>        set the prompt used in GHCi
   :set editor <cmd>           set the command used for :edit
   :set stop [<n>] <cmd>       set the command to run when a breakpoint is hit
   :unset <option> ...         unset options

  Options for ':set' and ':unset':

    +r            revert top-level expressions after each evaluation
    +s            print timing/memory stats after each evaluation
    +t            print type after evaluation
    -<flags>      most GHC command line flags can also be set here
                         (eg. -v2, -fglasgow-exts, etc.)
                    for GHCi-specific flags, see User's Guide,
                    Flag reference, Interactive-mode options

 -- Commands for displaying information:

   :show bindings              show the current bindings made at the prompt
   :show breaks                show the active breakpoints
   :show context               show the breakpoint context
   :show modules               show the currently loaded modules
   :show packages              show the currently active package flags
   :show languages             show the currently active language flags
   :show <setting>             show value of <setting>, which is one of
                                  [args, prog, prompt, editor, stop]

Prelude> Prelude> x :: Integer = _
Prelude> Leaving GHCi.
ex2: exit 127
/home/jdc/git/rwhaskell/ch1/ex2: 6: x: not found
GHCi, version 6.12.1: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude>  Commands available from the prompt:

   <statement>                 evaluate/run <statement>
   :                           repeat last command
   :{\n ..lines.. \n:}\n       multiline command
   :add [*]<module> ...        add module(s) to the current target set
   :browse[!] [[*]<mod>]       display the names defined by module <mod>
                               (!: more details; *: all top-level names)
   :cd <dir>                   change directory to <dir>
   :cmd <expr>                 run the commands returned by <expr>::IO String
   :ctags[!] [<file>]          create tags file for Vi (default: "tags")
                               (!: use regex instead of line number)
   :def <cmd> <expr>           define a command :<cmd>
   :edit <file>                edit file
   :edit                       edit last module
   :etags [<file>]             create tags file for Emacs (default: "TAGS")
   :help, :?                   display this list of commands
   :info [<name> ...]          display information about the given names
   :kind <type>                show the kind of <type>
   :load [*]<module> ...       load module(s) and their dependents
   :main [<arguments> ...]     run the main function with the given arguments
   :module [+/-] [*]<mod> ...  set the context for expression evaluation
   :quit                       exit GHCi
   :reload                     reload the current module set
   :run function [<arguments> ...] run the function with the given arguments
   :type <expr>                show the type of <expr>
   :undef <cmd>                undefine user-defined command :<cmd>
   :!<command>                 run the shell command <command>

 -- Commands for debugging:

   :abandon                    at a breakpoint, abandon current computation
   :back                       go back in the history (after :trace)
   :break [<mod>] <l> [<col>]  set a breakpoint at the specified location
   :break <name>               set a breakpoint on the specified function
   :continue                   resume after a breakpoint
   :delete <number>            delete the specified breakpoint
   :delete *                   delete all breakpoints
   :force <expr>               print <expr>, forcing unevaluated parts
   :forward                    go forward in the history (after :back)
   :history [<n>]              after :trace, show the execution history
   :list                       show the source code around current breakpoint
   :list identifier            show the source code for <identifier>
   :list [<module>] <line>     show the source code around line number <line>
   :print [<name> ...]         prints a value without forcing its computation
   :sprint [<name> ...]        simplifed version of :print
   :step                       single-step after stopping at a breakpoint
   :step <expr>                single-step into <expr>
   :steplocal                  single-step within the current top-level binding
   :stepmodule                 single-step restricted to the current module
   :trace                      trace after stopping at a breakpoint
   :trace <expr>               evaluate <expr> with tracing on (see :history)

 -- Commands for changing settings:

   :set <option> ...           set options
   :set args <arg> ...         set the arguments returned by System.getArgs
   :set prog <progname>        set the value returned by System.getProgName
   :set prompt <prompt>        set the prompt used in GHCi
   :set editor <cmd>           set the command used for :edit
   :set stop [<n>] <cmd>       set the command to run when a breakpoint is hit
   :unset <option> ...         unset options

  Options for ':set' and ':unset':

    +r            revert top-level expressions after each evaluation
    +s            print timing/memory stats after each evaluation
    +t            print type after evaluation
    -<flags>      most GHC command line flags can also be set here
                         (eg. -v2, -fglasgow-exts, etc.)
                    for GHCi-specific flags, see User's Guide,
                    Flag reference, Interactive-mode options

 -- Commands for displaying information:

   :show bindings              show the current bindings made at the prompt
   :show breaks                show the active breakpoints
   :show context               show the breakpoint context
   :show modules               show the currently loaded modules
   :show packages              show the currently active package flags
   :show languages             show the currently active language flags
   :show <setting>             show value of <setting>, which is one of
                                  [args, prog, prompt, editor, stop]

Prelude> Prelude> x :: Integer = _
Prelude> Leaving GHCi.
ghc -o lines lines.lhs 2>&1
7
ghc -o words words.lhs 2>&1
7
ghc -o words words.lhs 2>&1
14
ghc -o words words.lhs 2>&1
122
      7      14     122 quux.txt
      7      14     122 quux.txt
ghc -o chars chars.lhs 2>&1
cat: can't open wc: No such file or directory
0
ghc -o words words.lhs 2>&1
cat: can't open wc: No such file or directory
0
ghc -o lines lines.lhs 2>&1
7

      7      14     122 quux.txt
mk: 'chars' is up to date
122
mk: 'words' is up to date
14
mk: 'lines' is up to date
7

      7      14     122 quux.txt
mk: 'lines' is up to date
7
mk: 'words' is up to date
14
mk: 'chars' is up to date
122
rm -f UnicodeOperators.lhs calc.lhs calc_main.lhs calc_test.lhs constant.lhs cpprint.lhs exprint.lhs list.lhs list_main.lhs list_test.lhs *.hi *.o *.tix
rm -f -r .hpc
f          1          10         696         807  61.9565217 
         10          56        1004           0           0 /home/jdc/git/rwhaskell/ch1/guide Del Snarf Undo | Look 
